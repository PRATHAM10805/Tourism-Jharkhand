"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/feedback/route";
exports.ids = ["app/api/feedback/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Prachi_Desktop_SIH_2025_Tourism_Jharkhand_app_api_feedback_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/feedback/route.ts */ \"(rsc)/./app/api/feedback/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/feedback/route\",\n        pathname: \"/api/feedback\",\n        filename: \"route\",\n        bundlePath: \"app/api/feedback/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Prachi\\\\Desktop\\\\SIH 2025\\\\Tourism-Jharkhand\\\\app\\\\api\\\\feedback\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Prachi_Desktop_SIH_2025_Tourism_Jharkhand_app_api_feedback_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/feedback/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjMyX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGZmVlZGJhY2slMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmZlZWRiYWNrJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGZmVlZGJhY2slMkZyb3V0ZS50cyZhcHBEaXI9QyUzQSU1Q1VzZXJzJTVDUHJhY2hpJTVDRGVza3RvcCU1Q1NJSCUyMDIwMjUlNUNUb3VyaXNtLUpoYXJraGFuZCU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDUHJhY2hpJTVDRGVza3RvcCU1Q1NJSCUyMDIwMjUlNUNUb3VyaXNtLUpoYXJraGFuZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDcUM7QUFDbEg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Lz82MjYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFByYWNoaVxcXFxEZXNrdG9wXFxcXFNJSCAyMDI1XFxcXFRvdXJpc20tSmhhcmtoYW5kXFxcXGFwcFxcXFxhcGlcXFxcZmVlZGJhY2tcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2ZlZWRiYWNrL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvZmVlZGJhY2tcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2ZlZWRiYWNrL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcVXNlcnNcXFxcUHJhY2hpXFxcXERlc2t0b3BcXFxcU0lIIDIwMjVcXFxcVG91cmlzbS1KaGFya2hhbmRcXFxcYXBwXFxcXGFwaVxcXFxmZWVkYmFja1xcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZmVlZGJhY2svcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/feedback/route.ts":
/*!***********************************!*\
  !*** ./app/api/feedback/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/ai-services */ \"(rsc)/./lib/ai-services.ts\");\n\n\n// Real-time alert system\nclass AlertSystem {\n    static async triggerAlert(feedback) {\n        if (feedback.urgencyLevel === \"critical\" || feedback.urgencyLevel === \"high\") {\n            // In production, this would send real notifications\n            console.log(`🚨 CRITICAL ALERT: ${feedback.location} - ${feedback.category}`);\n            console.log(`Issue: ${feedback.aiAnalysis.actionableInsights?.join(\", \")}`);\n            // Auto-generate response for critical issues\n            feedback.autoResponseGenerated = await this.generateAutoResponse(feedback);\n            feedback.escalated = true;\n        }\n    }\n    static async generateAutoResponse(feedback) {\n        const insights = feedback.aiAnalysis.actionableInsights || [];\n        if (insights.some((i)=>i.includes(\"URGENT\") || i.includes(\"Safety\"))) {\n            return `Thank you for bringing this safety concern to our attention. We have immediately escalated this issue to our safety team and will address it within 24 hours. Your safety is our top priority.`;\n        }\n        if (feedback.aiAnalysis.sentiment === \"negative\" && feedback.aiAnalysis.confidence > 0.8) {\n            return `We sincerely apologize for your disappointing experience. We have forwarded your feedback to the relevant team for immediate action. We will contact you within 48 hours with an update on the improvements being made.`;\n        }\n        return `Thank you for your valuable feedback. We appreciate you taking the time to share your experience with us.`;\n    }\n}\n// Advanced AI-powered feedback analysis\nasync function analyzeAdvancedFeedback(textFeedback, voiceBlob, imageBlob, language = \"auto\") {\n    try {\n        const results = {};\n        // Analyze text if provided\n        if (textFeedback) {\n            results.aiAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(textFeedback, language);\n        }\n        // Analyze voice if provided\n        if (voiceBlob) {\n            results.voiceAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeVoice(voiceBlob);\n            // If no text feedback, use voice transcription for text analysis\n            if (!textFeedback && results.voiceAnalysis.transcription) {\n                results.aiAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(results.voiceAnalysis.transcription, language);\n            }\n        }\n        // Analyze image if provided\n        if (imageBlob) {\n            results.imageAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeImage(imageBlob);\n        }\n        return results;\n    } catch (error) {\n        console.error(\"Advanced feedback analysis failed:\", error);\n        // Fallback analysis\n        if (textFeedback) {\n            return {\n                aiAnalysis: await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(textFeedback, language)\n            };\n        }\n        throw error;\n    }\n}\n// Real-time sentiment monitoring\nclass SentimentMonitor {\n    static{\n        this.sentimentHistory = [];\n    }\n    static addSentiment(feedback) {\n        this.sentimentHistory.push({\n            timestamp: feedback.timestamp,\n            sentiment: feedback.aiAnalysis.sentiment,\n            confidence: feedback.aiAnalysis.confidence,\n            location: feedback.location,\n            category: feedback.category\n        });\n        // Keep only last 1000 entries\n        if (this.sentimentHistory.length > 1000) {\n            this.sentimentHistory = this.sentimentHistory.slice(-1000);\n        }\n        // Check for sentiment trends\n        this.checkSentimentTrends(feedback.location, feedback.category);\n    }\n    static checkSentimentTrends(location, category) {\n        const recentFeedbacks = this.sentimentHistory.filter((s)=>s.location === location && s.category === category).slice(-10) // Last 10 feedbacks for this location/category\n        ;\n        if (recentFeedbacks.length >= 5) {\n            const negativeFeedbacks = recentFeedbacks.filter((s)=>s.sentiment === \"negative\");\n            if (negativeFeedbacks.length >= 3) {\n                console.log(`⚠️ TREND ALERT: Increasing negative sentiment detected for ${location} - ${category}`);\n            // In production, this would trigger notifications to tourism officials\n            }\n        }\n    }\n    static getSentimentTrends(location, category) {\n        let filtered = this.sentimentHistory;\n        if (location) {\n            filtered = filtered.filter((s)=>s.location === location);\n        }\n        if (category) {\n            filtered = filtered.filter((s)=>s.category === category);\n        }\n        return filtered.slice(-30) // Last 30 entries\n        ;\n    }\n}\n// AI-powered chatbot for instant responses\nclass FeedbackChatbot {\n    static async generateResponse(feedback) {\n        const { aiAnalysis, location, category } = feedback;\n        // Generate contextual response based on AI analysis\n        if (aiAnalysis.urgency === \"critical\") {\n            return `Thank you for this critical feedback about ${location}. We are immediately addressing the ${aiAnalysis.categories?.join(\", \")} issues you've mentioned. A senior official will contact you within 2 hours.`;\n        }\n        if (aiAnalysis.sentiment === \"positive\") {\n            return `We're delighted to hear about your positive experience at ${location}! Thank you for highlighting ${aiAnalysis.keywords.slice(0, 3).join(\", \")}. We'll share your feedback with our team.`;\n        }\n        if (aiAnalysis.sentiment === \"negative\") {\n            const issues = aiAnalysis.actionableInsights?.slice(0, 2).join(\" and \") || \"the issues you mentioned\";\n            return `We sincerely apologize for your experience at ${location}. We're taking immediate action on ${issues}. You can expect an update within 24-48 hours.`;\n        }\n        return `Thank you for your feedback about ${location}. Your insights about ${category.toLowerCase()} are valuable for improving our tourism services.`;\n    }\n    static async generateFollowUpQuestions(feedback) {\n        const questions = [];\n        if (feedback.aiAnalysis.sentiment === \"negative\") {\n            questions.push(\"What specific steps would you like to see implemented to improve this experience?\");\n            questions.push(\"Would you be willing to revisit this location if improvements were made?\");\n        }\n        if (feedback.aiAnalysis.categories?.includes(\"service quality\")) {\n            questions.push(\"Can you provide more details about the staff interaction?\");\n        }\n        if (feedback.aiAnalysis.categories?.includes(\"cleanliness\")) {\n            questions.push(\"Which specific areas need attention regarding cleanliness?\");\n        }\n        return questions.slice(0, 3);\n    }\n}\n// Fallback rule-based sentiment analysis\nfunction fallbackSentimentAnalysis(text, language) {\n    const positiveWords = [\n        \"good\",\n        \"great\",\n        \"excellent\",\n        \"amazing\",\n        \"wonderful\",\n        \"beautiful\",\n        \"love\",\n        \"perfect\",\n        \"awesome\",\n        \"fantastic\"\n    ];\n    const negativeWords = [\n        \"bad\",\n        \"terrible\",\n        \"awful\",\n        \"horrible\",\n        \"hate\",\n        \"worst\",\n        \"disappointing\",\n        \"poor\",\n        \"dirty\",\n        \"unsafe\"\n    ];\n    // Hindi positive/negative words\n    const hindiPositive = [\n        \"अच्छा\",\n        \"बहुत\",\n        \"सुंदर\",\n        \"खुश\",\n        \"प्रसन्न\",\n        \"उत्कृष्ट\"\n    ];\n    const hindiNegative = [\n        \"बुरा\",\n        \"गंदा\",\n        \"खराब\",\n        \"दुखी\",\n        \"निराश\"\n    ];\n    const words = text.toLowerCase().split(/\\s+/);\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let keywords = [];\n    words.forEach((word)=>{\n        if (positiveWords.includes(word) || hindiPositive.includes(word)) {\n            positiveCount++;\n            keywords.push(word);\n        }\n        if (negativeWords.includes(word) || hindiNegative.includes(word)) {\n            negativeCount++;\n            keywords.push(word);\n        }\n    });\n    let sentiment = \"neutral\";\n    let confidence = 0.5;\n    if (positiveCount > negativeCount) {\n        sentiment = \"positive\";\n        confidence = Math.min(0.9, 0.5 + (positiveCount - negativeCount) * 0.1);\n    } else if (negativeCount > positiveCount) {\n        sentiment = \"negative\";\n        confidence = Math.min(0.9, 0.5 + (negativeCount - positiveCount) * 0.1);\n    }\n    const emotions = {\n        joy: sentiment === \"positive\" ? confidence * 0.8 : 0.1,\n        anger: sentiment === \"negative\" ? confidence * 0.6 : 0.1,\n        sadness: sentiment === \"negative\" ? confidence * 0.4 : 0.1,\n        surprise: 0.2,\n        fear: sentiment === \"negative\" ? confidence * 0.3 : 0.05,\n        disgust: sentiment === \"negative\" ? confidence * 0.2 : 0.05\n    };\n    return {\n        sentiment,\n        confidence,\n        emotions,\n        keywords: keywords.slice(0, 5)\n    };\n}\n// Enhanced feedback database with AI analysis\nlet feedbacks = [\n    {\n        id: 1,\n        userId: \"user_123\",\n        userName: \"Rajesh Kumar\",\n        location: \"Netarhat\",\n        category: \"Homestays\",\n        rating: 5,\n        textFeedback: \"Amazing experience staying with the local family. The food was delicious and the cultural activities were wonderful!\",\n        language: \"en\",\n        aiAnalysis: {\n            sentiment: \"positive\",\n            confidence: 0.9,\n            emotions: {\n                joy: 0.8,\n                satisfaction: 0.7,\n                excitement: 0.6\n            },\n            keywords: [\n                \"amazing\",\n                \"delicious\",\n                \"wonderful\",\n                \"cultural\",\n                \"family\"\n            ],\n            language: \"en\",\n            toxicity: 0.01,\n            urgency: \"low\",\n            categories: [\n                \"accommodation\",\n                \"food\",\n                \"cultural experience\"\n            ],\n            actionableInsights: [\n                \"Leverage positive aspects in marketing and promotion\",\n                \"Highlight cultural activities in homestay descriptions\"\n            ]\n        },\n        timestamp: new Date().toISOString(),\n        isVerified: true,\n        responseFromVendor: undefined,\n        flagged: false,\n        urgencyLevel: \"low\",\n        autoResponseGenerated: \"We're delighted to hear about your positive experience at Netarhat! Thank you for highlighting amazing, delicious, wonderful. We'll share your feedback with our team.\"\n    },\n    {\n        id: 2,\n        userId: \"user_456\",\n        userName: \"Priya Sharma\",\n        location: \"Betla National Park\",\n        category: \"Experiences\",\n        rating: 2,\n        textFeedback: \"The guide was unprofessional and the safari was disappointing. Poor organization overall.\",\n        language: \"en\",\n        aiAnalysis: {\n            sentiment: \"negative\",\n            confidence: 0.8,\n            emotions: {\n                anger: 0.6,\n                disappointment: 0.7,\n                frustration: 0.5\n            },\n            keywords: [\n                \"unprofessional\",\n                \"disappointing\",\n                \"poor\",\n                \"organization\",\n                \"guide\"\n            ],\n            language: \"en\",\n            toxicity: 0.15,\n            urgency: \"high\",\n            categories: [\n                \"service quality\",\n                \"experiences\",\n                \"staff behavior\"\n            ],\n            actionableInsights: [\n                \"Staff training and customer service improvement needed\",\n                \"Review guide certification and training programs\",\n                \"Implement better safari organization protocols\"\n            ]\n        },\n        timestamp: new Date(Date.now() - 86400000).toISOString(),\n        isVerified: true,\n        responseFromVendor: \"We apologize for the poor experience. We have addressed this with our guide team.\",\n        flagged: true,\n        urgencyLevel: \"high\",\n        autoResponseGenerated: \"We sincerely apologize for your experience at Betla National Park. We're taking immediate action on Staff training and customer service improvement needed and Review guide certification and training programs. You can expect an update within 24-48 hours.\",\n        escalated: true\n    }\n];\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const location = searchParams.get(\"location\");\n        const category = searchParams.get(\"category\");\n        const sentiment = searchParams.get(\"sentiment\");\n        const flagged = searchParams.get(\"flagged\");\n        const urgency = searchParams.get(\"urgency\");\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const offset = parseInt(searchParams.get(\"offset\") || \"0\");\n        let filteredFeedbacks = [\n            ...feedbacks\n        ];\n        if (location && location !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.location === location);\n        }\n        if (category && category !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.category === category);\n        }\n        if (sentiment && sentiment !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === sentiment);\n        }\n        if (flagged === \"true\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.flagged);\n        }\n        if (urgency && urgency !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.urgencyLevel === urgency);\n        }\n        // Sort by timestamp (newest first)\n        filteredFeedbacks.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n        const paginatedFeedbacks = filteredFeedbacks.slice(offset, offset + limit);\n        // Calculate sentiment statistics\n        const sentimentStats = {\n            positive: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"positive\").length,\n            negative: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"negative\").length,\n            neutral: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"neutral\").length,\n            total: filteredFeedbacks.length\n        };\n        // Calculate urgency statistics\n        const urgencyStats = {\n            critical: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"critical\").length,\n            high: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"high\").length,\n            medium: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"medium\").length,\n            low: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"low\").length\n        };\n        // Get sentiment trends\n        const sentimentTrends = SentimentMonitor.getSentimentTrends(location || undefined, category || undefined);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            feedbacks: paginatedFeedbacks,\n            total: filteredFeedbacks.length,\n            sentimentStats,\n            urgencyStats,\n            sentimentTrends,\n            hasMore: offset + limit < filteredFeedbacks.length\n        });\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { userId, userName, location, category, rating, textFeedback, language = \"auto\", voiceData, imageData, emojiRating } = body;\n        // Advanced AI analysis\n        let aiAnalysis;\n        let voiceAnalysis;\n        let imageAnalysis;\n        try {\n            // Convert base64 data to blobs if provided\n            const voiceBlob = voiceData ? new Blob([\n                Buffer.from(voiceData, \"base64\")\n            ], {\n                type: \"audio/wav\"\n            }) : undefined;\n            const imageBlob = imageData ? new Blob([\n                Buffer.from(imageData, \"base64\")\n            ], {\n                type: \"image/jpeg\"\n            }) : undefined;\n            const analysisResults = await analyzeAdvancedFeedback(textFeedback, voiceBlob, imageBlob, language);\n            aiAnalysis = analysisResults.aiAnalysis;\n            voiceAnalysis = analysisResults.voiceAnalysis;\n            imageAnalysis = analysisResults.imageAnalysis;\n        } catch (error) {\n            console.error(\"AI analysis failed, using fallback:\", error);\n            // Fallback to basic analysis\n            aiAnalysis = {\n                sentiment: \"neutral\",\n                confidence: 0.5,\n                emotions: {},\n                keywords: [],\n                language: language || \"en\",\n                toxicity: 0,\n                urgency: \"low\",\n                categories: [],\n                actionableInsights: []\n            };\n        }\n        // Determine urgency level\n        const urgencyLevel = aiAnalysis.urgency || \"low\";\n        // Check for flagging conditions\n        const flagged = aiAnalysis.sentiment === \"negative\" && aiAnalysis.confidence > 0.7 || aiAnalysis.toxicity && aiAnalysis.toxicity > 0.5 || urgencyLevel === \"critical\" || urgencyLevel === \"high\";\n        const newFeedback = {\n            id: feedbacks.length + 1,\n            userId,\n            userName,\n            location,\n            category,\n            rating,\n            textFeedback,\n            language: aiAnalysis.language,\n            voiceData,\n            imageData,\n            emojiRating,\n            aiAnalysis,\n            voiceAnalysis,\n            imageAnalysis,\n            timestamp: new Date().toISOString(),\n            isVerified: false,\n            responseFromVendor: undefined,\n            flagged,\n            urgencyLevel\n        };\n        // Generate auto-response using AI chatbot\n        try {\n            newFeedback.autoResponseGenerated = await FeedbackChatbot.generateResponse(newFeedback);\n        } catch (error) {\n            console.error(\"Auto-response generation failed:\", error);\n        }\n        feedbacks.push(newFeedback);\n        // Add to sentiment monitoring\n        SentimentMonitor.addSentiment(newFeedback);\n        // Trigger alerts for critical issues\n        await AlertSystem.triggerAlert(newFeedback);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            ...newFeedback,\n            followUpQuestions: await FeedbackChatbot.generateFollowUpQuestions(newFeedback)\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Failed to submit feedback:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to submit feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const body = await request.json();\n        const { feedbackId, responseFromVendor, flagged } = body;\n        const feedbackIndex = feedbacks.findIndex((f)=>f.id === feedbackId);\n        if (feedbackIndex === -1) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Feedback not found\"\n            }, {\n                status: 404\n            });\n        }\n        feedbacks[feedbackIndex] = {\n            ...feedbacks[feedbackIndex],\n            ...responseFromVendor && {\n                responseFromVendor\n            },\n            ...typeof flagged === \"boolean\" && {\n                flagged\n            },\n            updatedAt: new Date().toISOString()\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(feedbacks[feedbackIndex]);\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to update feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/feedback/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/ai-services.ts":
/*!****************************!*\
  !*** ./lib/ai-services.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedAIService: () => (/* binding */ AdvancedAIService),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n// Advanced AI Services for Tourism Jharkhand\n// Integrates multiple AI APIs for comprehensive analysis\n// Advanced multilingual sentiment analysis with multiple AI models\nclass AdvancedAIService {\n    constructor(){\n        this.huggingFaceKey = process.env.HUGGINGFACE_API_KEY || \"\";\n        this.openAIKey = process.env.OPENAI_API_KEY;\n        this.googleCloudKey = process.env.GOOGLE_CLOUD_API_KEY;\n    }\n    // Enhanced text analysis with multiple AI models\n    async analyzeText(text, language = \"auto\") {\n        try {\n            // Detect language if not specified\n            const detectedLanguage = language === \"auto\" ? await this.detectLanguage(text) : language;\n            // Run multiple AI analyses in parallel\n            const [sentimentResult, emotionResult, toxicityResult, categoryResult] = await Promise.allSettled([\n                this.analyzeSentiment(text, detectedLanguage),\n                this.analyzeEmotions(text),\n                this.analyzeToxicity(text),\n                this.categorizeText(text)\n            ]);\n            // Extract keywords using advanced NLP\n            const keywords = await this.extractAdvancedKeywords(text, detectedLanguage);\n            // Generate actionable insights\n            const insights = await this.generateActionableInsights(text, detectedLanguage);\n            // Determine urgency level\n            const urgency = this.calculateUrgency(sentimentResult.status === \"fulfilled\" ? sentimentResult.value : null, toxicityResult.status === \"fulfilled\" ? toxicityResult.value : 0);\n            return {\n                sentiment: sentimentResult.status === \"fulfilled\" ? sentimentResult.value.sentiment : \"neutral\",\n                confidence: sentimentResult.status === \"fulfilled\" ? sentimentResult.value.confidence : 0.5,\n                emotions: emotionResult.status === \"fulfilled\" ? emotionResult.value : {},\n                keywords,\n                language: detectedLanguage,\n                toxicity: toxicityResult.status === \"fulfilled\" ? toxicityResult.value : 0,\n                urgency,\n                categories: categoryResult.status === \"fulfilled\" ? categoryResult.value : [],\n                actionableInsights: insights\n            };\n        } catch (error) {\n            console.error(\"Advanced AI analysis failed:\", error);\n            return this.fallbackAnalysis(text, language);\n        }\n    }\n    // Voice analysis with speech-to-text and emotion detection\n    async analyzeVoice(audioBlob) {\n        try {\n            // Convert audio to text using Hugging Face Whisper\n            const transcription = await this.speechToText(audioBlob);\n            // Analyze the transcribed text\n            const textAnalysis = await this.analyzeText(transcription);\n            // Analyze voice tone and emotions from audio\n            const voiceEmotions = await this.analyzeVoiceEmotions(audioBlob);\n            return {\n                transcription,\n                sentiment: textAnalysis.sentiment,\n                confidence: textAnalysis.confidence,\n                emotions: {\n                    ...textAnalysis.emotions,\n                    ...voiceEmotions\n                },\n                speakerTone: this.determineSpeakerTone(voiceEmotions),\n                language: textAnalysis.language\n            };\n        } catch (error) {\n            console.error(\"Voice analysis failed:\", error);\n            throw new Error(\"Voice analysis service unavailable\");\n        }\n    }\n    // Image analysis for visual feedback\n    async analyzeImage(imageBlob) {\n        try {\n            // Convert image to base64\n            const base64Image = await this.blobToBase64(imageBlob);\n            // Analyze image content using Hugging Face Vision models\n            const [description, objects, sentiment] = await Promise.all([\n                this.generateImageDescription(base64Image),\n                this.detectObjects(base64Image),\n                this.analyzeImageSentiment(base64Image)\n            ]);\n            // Assess image quality\n            const quality = await this.assessImageQuality(base64Image);\n            // Detect potential issues\n            const issues = await this.detectImageIssues(base64Image, objects);\n            return {\n                description,\n                objects,\n                sentiment,\n                quality,\n                issues,\n                location: await this.extractLocationFromImage(base64Image)\n            };\n        } catch (error) {\n            console.error(\"Image analysis failed:\", error);\n            throw new Error(\"Image analysis service unavailable\");\n        }\n    }\n    // Language detection using AI\n    async detectLanguage(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/fasttext-language-identification\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result[0]?.label?.replace(\"__label__\", \"\") || \"en\";\n            }\n        } catch (error) {\n            console.error(\"Language detection failed:\", error);\n        }\n        return \"en\";\n    }\n    // Enhanced sentiment analysis with multiple models\n    async analyzeSentiment(text, language) {\n        const models = [\n            \"cardiffnlp/twitter-roberta-base-sentiment-latest\",\n            \"nlptown/bert-base-multilingual-uncased-sentiment\"\n        ];\n        for (const model of models){\n            try {\n                const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        inputs: text\n                    })\n                });\n                if (response.ok) {\n                    const result = await response.json();\n                    if (Array.isArray(result) && result.length > 0) {\n                        const topResult = result[0];\n                        return {\n                            sentiment: this.normalizeSentiment(topResult.label),\n                            confidence: topResult.score\n                        };\n                    }\n                }\n            } catch (error) {\n                console.error(`Sentiment analysis with ${model} failed:`, error);\n            }\n        }\n        throw new Error(\"All sentiment analysis models failed\");\n    }\n    // Advanced emotion analysis\n    async analyzeEmotions(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/j-hartmann/emotion-english-distilroberta-base\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const emotions = await response.json();\n                if (Array.isArray(emotions) && emotions.length > 0) {\n                    const emotionScores = {};\n                    emotions[0].forEach((emotion)=>{\n                        emotionScores[emotion.label.toLowerCase()] = emotion.score;\n                    });\n                    return emotionScores;\n                }\n            }\n        } catch (error) {\n            console.error(\"Emotion analysis failed:\", error);\n        }\n        return {};\n    }\n    // Toxicity detection\n    async analyzeToxicity(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/unitary/toxic-bert\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                if (Array.isArray(result) && result.length > 0) {\n                    const toxicResult = result[0].find((r)=>r.label === \"TOXIC\");\n                    return toxicResult ? toxicResult.score : 0;\n                }\n            }\n        } catch (error) {\n            console.error(\"Toxicity analysis failed:\", error);\n        }\n        return 0;\n    }\n    // Text categorization\n    async categorizeText(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/bart-large-mnli\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text,\n                    parameters: {\n                        candidate_labels: [\n                            \"accommodation\",\n                            \"food\",\n                            \"transportation\",\n                            \"attractions\",\n                            \"service quality\",\n                            \"cleanliness\",\n                            \"safety\",\n                            \"pricing\",\n                            \"accessibility\",\n                            \"cultural experience\"\n                        ]\n                    }\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.labels?.slice(0, 3) || [];\n            }\n        } catch (error) {\n            console.error(\"Text categorization failed:\", error);\n        }\n        return [];\n    }\n    // Advanced keyword extraction using TF-IDF and NER\n    async extractAdvancedKeywords(text, language) {\n        try {\n            // Named Entity Recognition\n            const response = await fetch(\"https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            const entities = [];\n            if (response.ok) {\n                const result = await response.json();\n                if (Array.isArray(result)) {\n                    result.forEach((entity)=>{\n                        if (entity.entity_group && entity.word) {\n                            entities.push(entity.word.replace(\"##\", \"\"));\n                        }\n                    });\n                }\n            }\n            // Combine with TF-IDF keywords\n            const tfidfKeywords = this.extractTFIDFKeywords(text);\n            return [\n                ...new Set([\n                    ...entities,\n                    ...tfidfKeywords\n                ])\n            ].slice(0, 10);\n        } catch (error) {\n            console.error(\"Advanced keyword extraction failed:\", error);\n            return this.extractTFIDFKeywords(text);\n        }\n    }\n    // Generate actionable insights using AI\n    async generateActionableInsights(text, language) {\n        const insights = [];\n        // Rule-based insights for now (can be enhanced with GPT-4 later)\n        const lowercaseText = text.toLowerCase();\n        if (lowercaseText.includes(\"dirty\") || lowercaseText.includes(\"unclean\")) {\n            insights.push(\"Immediate cleaning and hygiene improvement required\");\n        }\n        if (lowercaseText.includes(\"expensive\") || lowercaseText.includes(\"overpriced\")) {\n            insights.push(\"Review pricing strategy and provide value justification\");\n        }\n        if (lowercaseText.includes(\"rude\") || lowercaseText.includes(\"unprofessional\")) {\n            insights.push(\"Staff training and customer service improvement needed\");\n        }\n        if (lowercaseText.includes(\"unsafe\") || lowercaseText.includes(\"dangerous\")) {\n            insights.push(\"URGENT: Safety assessment and security measures required\");\n        }\n        if (lowercaseText.includes(\"beautiful\") || lowercaseText.includes(\"amazing\")) {\n            insights.push(\"Leverage positive aspects in marketing and promotion\");\n        }\n        return insights;\n    }\n    // Calculate urgency level\n    calculateUrgency(sentiment, toxicity) {\n        if (toxicity > 0.8 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.9) {\n            return \"critical\";\n        }\n        if (toxicity > 0.6 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.7) {\n            return \"high\";\n        }\n        if (toxicity > 0.3 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.5) {\n            return \"medium\";\n        }\n        return \"low\";\n    }\n    // Speech to text conversion\n    async speechToText(audioBlob) {\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", audioBlob, \"audio.wav\");\n            const response = await fetch(\"https://api-inference.huggingface.co/models/openai/whisper-large-v3\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`\n                },\n                method: \"POST\",\n                body: formData\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.text || \"\";\n            }\n        } catch (error) {\n            console.error(\"Speech to text failed:\", error);\n        }\n        return \"\";\n    }\n    // Voice emotion analysis\n    async analyzeVoiceEmotions(audioBlob) {\n        // Placeholder for voice emotion analysis\n        // In production, this would use specialized audio emotion recognition models\n        return {\n            calm: 0.3,\n            excited: 0.2,\n            frustrated: 0.1,\n            happy: 0.4\n        };\n    }\n    // Determine speaker tone from voice emotions\n    determineSpeakerTone(emotions) {\n        const maxEmotion = Object.entries(emotions).reduce((a, b)=>a[1] > b[1] ? a : b);\n        return maxEmotion[0] || \"calm\";\n    }\n    // Image description generation\n    async generateImageDescription(base64Image) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/Salesforce/blip-image-captioning-large\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: base64Image\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result[0]?.generated_text || \"Unable to generate description\";\n            }\n        } catch (error) {\n            console.error(\"Image description failed:\", error);\n        }\n        return \"Image analysis unavailable\";\n    }\n    // Object detection in images\n    async detectObjects(base64Image) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/detr-resnet-50\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: base64Image\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.map((obj)=>obj.label).slice(0, 10);\n            }\n        } catch (error) {\n            console.error(\"Object detection failed:\", error);\n        }\n        return [];\n    }\n    // Image sentiment analysis\n    async analyzeImageSentiment(base64Image) {\n        // Placeholder - would use specialized image sentiment models\n        return \"neutral\";\n    }\n    // Assess image quality\n    async assessImageQuality(base64Image) {\n        // Placeholder - would use image quality assessment models\n        return Math.random() * 0.3 + 0.7 // Random quality between 0.7-1.0\n        ;\n    }\n    // Detect issues in images\n    async detectImageIssues(base64Image, objects) {\n        const issues = [];\n        // Rule-based issue detection\n        if (objects.includes(\"trash\") || objects.includes(\"garbage\")) {\n            issues.push(\"Cleanliness issue detected\");\n        }\n        if (objects.includes(\"damage\") || objects.includes(\"broken\")) {\n            issues.push(\"Infrastructure damage detected\");\n        }\n        return issues;\n    }\n    // Extract location from image metadata\n    async extractLocationFromImage(base64Image) {\n        // Placeholder - would extract GPS data from EXIF or use image recognition\n        return undefined;\n    }\n    // Utility functions\n    async blobToBase64(blob) {\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.onloadend = ()=>resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        });\n    }\n    normalizeSentiment(label) {\n        const normalized = label.toLowerCase();\n        if (normalized.includes(\"positive\") || normalized.includes(\"pos\")) return \"positive\";\n        if (normalized.includes(\"negative\") || normalized.includes(\"neg\")) return \"negative\";\n        return \"neutral\";\n    }\n    extractTFIDFKeywords(text) {\n        const stopWords = new Set([\n            \"the\",\n            \"a\",\n            \"an\",\n            \"and\",\n            \"or\",\n            \"but\",\n            \"in\",\n            \"on\",\n            \"at\",\n            \"to\",\n            \"for\",\n            \"of\",\n            \"with\",\n            \"by\",\n            \"is\",\n            \"was\",\n            \"are\",\n            \"were\",\n            \"be\",\n            \"been\",\n            \"have\",\n            \"has\",\n            \"had\",\n            \"do\",\n            \"does\",\n            \"did\",\n            \"will\",\n            \"would\",\n            \"could\",\n            \"should\",\n            \"may\",\n            \"might\",\n            \"must\",\n            \"can\",\n            \"this\",\n            \"that\",\n            \"these\",\n            \"those\",\n            \"i\",\n            \"you\",\n            \"he\",\n            \"she\",\n            \"it\",\n            \"we\",\n            \"they\",\n            \"me\",\n            \"him\",\n            \"her\",\n            \"us\",\n            \"them\"\n        ]);\n        const words = text.toLowerCase().replace(/[^\\w\\s]/g, \"\").split(/\\s+/).filter((word)=>word.length > 2 && !stopWords.has(word));\n        const wordCount = {};\n        words.forEach((word)=>{\n            wordCount[word] = (wordCount[word] || 0) + 1;\n        });\n        return Object.entries(wordCount).sort(([, a], [, b])=>b - a).slice(0, 5).map(([word])=>word);\n    }\n    fallbackAnalysis(text, language) {\n        // Simple rule-based fallback\n        const positiveWords = [\n            \"good\",\n            \"great\",\n            \"excellent\",\n            \"amazing\",\n            \"wonderful\",\n            \"beautiful\",\n            \"love\",\n            \"perfect\"\n        ];\n        const negativeWords = [\n            \"bad\",\n            \"terrible\",\n            \"awful\",\n            \"horrible\",\n            \"hate\",\n            \"worst\",\n            \"disappointing\",\n            \"poor\"\n        ];\n        const words = text.toLowerCase().split(/\\s+/);\n        const positiveCount = words.filter((word)=>positiveWords.includes(word)).length;\n        const negativeCount = words.filter((word)=>negativeWords.includes(word)).length;\n        let sentiment = \"neutral\";\n        let confidence = 0.5;\n        if (positiveCount > negativeCount) {\n            sentiment = \"positive\";\n            confidence = Math.min(0.8, 0.5 + (positiveCount - negativeCount) * 0.1);\n        } else if (negativeCount > positiveCount) {\n            sentiment = \"negative\";\n            confidence = Math.min(0.8, 0.5 + (negativeCount - positiveCount) * 0.1);\n        }\n        return {\n            sentiment,\n            confidence,\n            emotions: {\n                joy: sentiment === \"positive\" ? confidence * 0.8 : 0.1,\n                anger: sentiment === \"negative\" ? confidence * 0.6 : 0.1,\n                sadness: sentiment === \"negative\" ? confidence * 0.4 : 0.1\n            },\n            keywords: this.extractTFIDFKeywords(text),\n            language: language || \"en\",\n            toxicity: 0,\n            urgency: \"low\",\n            categories: [],\n            actionableInsights: []\n        };\n    }\n}\n// Singleton instance\nconst aiService = new AdvancedAIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/ai-services.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();