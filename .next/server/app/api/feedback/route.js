"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/feedback/route";
exports.ids = ["app/api/feedback/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_priya_OneDrive_Desktop_SIH_Tourism_Jharkhand_app_api_feedback_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/feedback/route.ts */ \"(rsc)/./app/api/feedback/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/feedback/route\",\n        pathname: \"/api/feedback\",\n        filename: \"route\",\n        bundlePath: \"app/api/feedback/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\priya\\\\OneDrive\\\\Desktop\\\\SIH\\\\Tourism-Jharkhand\\\\app\\\\api\\\\feedback\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_priya_OneDrive_Desktop_SIH_Tourism_Jharkhand_app_api_feedback_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/feedback/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZmZWVkYmFjayUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGZmVlZGJhY2slMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZmZWVkYmFjayUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNwcml5YSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q1NJSCU1Q1RvdXJpc20tSmhhcmtoYW5kJTVDYXBwJnBhZ2VFeHRlbnNpb25zPXRzeCZwYWdlRXh0ZW5zaW9ucz10cyZwYWdlRXh0ZW5zaW9ucz1qc3gmcGFnZUV4dGVuc2lvbnM9anMmcm9vdERpcj1DJTNBJTVDVXNlcnMlNUNwcml5YSU1Q09uZURyaXZlJTVDRGVza3RvcCU1Q1NJSCU1Q1RvdXJpc20tSmhhcmtoYW5kJmlzRGV2PXRydWUmdHNjb25maWdQYXRoPXRzY29uZmlnLmpzb24mYmFzZVBhdGg9JmFzc2V0UHJlZml4PSZuZXh0Q29uZmlnT3V0cHV0PSZwcmVmZXJyZWRSZWdpb249Jm1pZGRsZXdhcmVDb25maWc9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUN5QztBQUN0SDtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvPzQxMzQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxccHJpeWFcXFxcT25lRHJpdmVcXFxcRGVza3RvcFxcXFxTSUhcXFxcVG91cmlzbS1KaGFya2hhbmRcXFxcYXBwXFxcXGFwaVxcXFxmZWVkYmFja1xcXFxyb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZmVlZGJhY2svcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9mZWVkYmFja1wiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvZmVlZGJhY2svcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCJDOlxcXFxVc2Vyc1xcXFxwcml5YVxcXFxPbmVEcml2ZVxcXFxEZXNrdG9wXFxcXFNJSFxcXFxUb3VyaXNtLUpoYXJraGFuZFxcXFxhcHBcXFxcYXBpXFxcXGZlZWRiYWNrXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9mZWVkYmFjay9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/feedback/route.ts":
/*!***********************************!*\
  !*** ./app/api/feedback/route.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST),\n/* harmony export */   PUT: () => (/* binding */ PUT)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/ai-services */ \"(rsc)/./lib/ai-services.ts\");\n\n\n// Real-time alert system\nclass AlertSystem {\n    static async triggerAlert(feedback) {\n        if (feedback.urgencyLevel === \"critical\" || feedback.urgencyLevel === \"high\") {\n            // In production, this would send real notifications\n            console.log(`🚨 CRITICAL ALERT: ${feedback.location} - ${feedback.category}`);\n            console.log(`Issue: ${feedback.aiAnalysis.actionableInsights?.join(\", \")}`);\n            // Auto-generate response for critical issues\n            feedback.autoResponseGenerated = await this.generateAutoResponse(feedback);\n            feedback.escalated = true;\n        }\n    }\n    static async generateAutoResponse(feedback) {\n        const insights = feedback.aiAnalysis.actionableInsights || [];\n        if (insights.some((i)=>i.includes(\"URGENT\") || i.includes(\"Safety\"))) {\n            return `Thank you for bringing this safety concern to our attention. We have immediately escalated this issue to our safety team and will address it within 24 hours. Your safety is our top priority.`;\n        }\n        if (feedback.aiAnalysis.sentiment === \"negative\" && feedback.aiAnalysis.confidence > 0.8) {\n            return `We sincerely apologize for your disappointing experience. We have forwarded your feedback to the relevant team for immediate action. We will contact you within 48 hours with an update on the improvements being made.`;\n        }\n        return `Thank you for your valuable feedback. We appreciate you taking the time to share your experience with us.`;\n    }\n}\n// Advanced AI-powered feedback analysis\nasync function analyzeAdvancedFeedback(textFeedback, voiceBlob, imageBlob, language = \"auto\") {\n    try {\n        const results = {};\n        // Analyze text if provided\n        if (textFeedback) {\n            results.aiAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(textFeedback, language);\n        }\n        // Analyze voice if provided\n        if (voiceBlob) {\n            results.voiceAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeVoice(voiceBlob);\n            // If no text feedback, use voice transcription for text analysis\n            if (!textFeedback && results.voiceAnalysis.transcription) {\n                results.aiAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(results.voiceAnalysis.transcription, language);\n            }\n        }\n        // Analyze image if provided\n        if (imageBlob) {\n            results.imageAnalysis = await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeImage(imageBlob);\n        }\n        return results;\n    } catch (error) {\n        console.error(\"Advanced feedback analysis failed:\", error);\n        // Fallback analysis\n        if (textFeedback) {\n            return {\n                aiAnalysis: await _lib_ai_services__WEBPACK_IMPORTED_MODULE_1__.aiService.analyzeText(textFeedback, language)\n            };\n        }\n        throw error;\n    }\n}\n// Real-time sentiment monitoring\nclass SentimentMonitor {\n    static{\n        this.sentimentHistory = [];\n    }\n    static addSentiment(feedback) {\n        this.sentimentHistory.push({\n            timestamp: feedback.timestamp,\n            sentiment: feedback.aiAnalysis.sentiment,\n            confidence: feedback.aiAnalysis.confidence,\n            location: feedback.location,\n            category: feedback.category\n        });\n        // Keep only last 1000 entries\n        if (this.sentimentHistory.length > 1000) {\n            this.sentimentHistory = this.sentimentHistory.slice(-1000);\n        }\n        // Check for sentiment trends\n        this.checkSentimentTrends(feedback.location, feedback.category);\n    }\n    static checkSentimentTrends(location, category) {\n        const recentFeedbacks = this.sentimentHistory.filter((s)=>s.location === location && s.category === category).slice(-10) // Last 10 feedbacks for this location/category\n        ;\n        if (recentFeedbacks.length >= 5) {\n            const negativeFeedbacks = recentFeedbacks.filter((s)=>s.sentiment === \"negative\");\n            if (negativeFeedbacks.length >= 3) {\n                console.log(`⚠️ TREND ALERT: Increasing negative sentiment detected for ${location} - ${category}`);\n            // In production, this would trigger notifications to tourism officials\n            }\n        }\n    }\n    static getSentimentTrends(location, category) {\n        let filtered = this.sentimentHistory;\n        if (location) {\n            filtered = filtered.filter((s)=>s.location === location);\n        }\n        if (category) {\n            filtered = filtered.filter((s)=>s.category === category);\n        }\n        return filtered.slice(-30) // Last 30 entries\n        ;\n    }\n}\n// AI-powered chatbot for instant responses\nclass FeedbackChatbot {\n    static async generateResponse(feedback) {\n        const { aiAnalysis, location, category } = feedback;\n        // Generate contextual response based on AI analysis\n        if (aiAnalysis.urgency === \"critical\") {\n            return `Thank you for this critical feedback about ${location}. We are immediately addressing the ${aiAnalysis.categories?.join(\", \")} issues you've mentioned. A senior official will contact you within 2 hours.`;\n        }\n        if (aiAnalysis.sentiment === \"positive\") {\n            return `We're delighted to hear about your positive experience at ${location}! Thank you for highlighting ${aiAnalysis.keywords.slice(0, 3).join(\", \")}. We'll share your feedback with our team.`;\n        }\n        if (aiAnalysis.sentiment === \"negative\") {\n            const issues = aiAnalysis.actionableInsights?.slice(0, 2).join(\" and \") || \"the issues you mentioned\";\n            return `We sincerely apologize for your experience at ${location}. We're taking immediate action on ${issues}. You can expect an update within 24-48 hours.`;\n        }\n        return `Thank you for your feedback about ${location}. Your insights about ${category.toLowerCase()} are valuable for improving our tourism services.`;\n    }\n    static async generateFollowUpQuestions(feedback) {\n        const questions = [];\n        if (feedback.aiAnalysis.sentiment === \"negative\") {\n            questions.push(\"What specific steps would you like to see implemented to improve this experience?\");\n            questions.push(\"Would you be willing to revisit this location if improvements were made?\");\n        }\n        if (feedback.aiAnalysis.categories?.includes(\"service quality\")) {\n            questions.push(\"Can you provide more details about the staff interaction?\");\n        }\n        if (feedback.aiAnalysis.categories?.includes(\"cleanliness\")) {\n            questions.push(\"Which specific areas need attention regarding cleanliness?\");\n        }\n        return questions.slice(0, 3);\n    }\n}\n// Fallback rule-based sentiment analysis\nfunction fallbackSentimentAnalysis(text, language) {\n    const positiveWords = [\n        \"good\",\n        \"great\",\n        \"excellent\",\n        \"amazing\",\n        \"wonderful\",\n        \"beautiful\",\n        \"love\",\n        \"perfect\",\n        \"awesome\",\n        \"fantastic\"\n    ];\n    const negativeWords = [\n        \"bad\",\n        \"terrible\",\n        \"awful\",\n        \"horrible\",\n        \"hate\",\n        \"worst\",\n        \"disappointing\",\n        \"poor\",\n        \"dirty\",\n        \"unsafe\"\n    ];\n    // Hindi positive/negative words\n    const hindiPositive = [\n        \"अच्छा\",\n        \"बहुत\",\n        \"सुंदर\",\n        \"खुश\",\n        \"प्रसन्न\",\n        \"उत्कृष्ट\"\n    ];\n    const hindiNegative = [\n        \"बुरा\",\n        \"गंदा\",\n        \"खराब\",\n        \"दुखी\",\n        \"निराश\"\n    ];\n    const words = text.toLowerCase().split(/\\s+/);\n    let positiveCount = 0;\n    let negativeCount = 0;\n    let keywords = [];\n    words.forEach((word)=>{\n        if (positiveWords.includes(word) || hindiPositive.includes(word)) {\n            positiveCount++;\n            keywords.push(word);\n        }\n        if (negativeWords.includes(word) || hindiNegative.includes(word)) {\n            negativeCount++;\n            keywords.push(word);\n        }\n    });\n    let sentiment = \"neutral\";\n    let confidence = 0.5;\n    if (positiveCount > negativeCount) {\n        sentiment = \"positive\";\n        confidence = Math.min(0.9, 0.5 + (positiveCount - negativeCount) * 0.1);\n    } else if (negativeCount > positiveCount) {\n        sentiment = \"negative\";\n        confidence = Math.min(0.9, 0.5 + (negativeCount - positiveCount) * 0.1);\n    }\n    const emotions = {\n        joy: sentiment === \"positive\" ? confidence * 0.8 : 0.1,\n        anger: sentiment === \"negative\" ? confidence * 0.6 : 0.1,\n        sadness: sentiment === \"negative\" ? confidence * 0.4 : 0.1,\n        surprise: 0.2,\n        fear: sentiment === \"negative\" ? confidence * 0.3 : 0.05,\n        disgust: sentiment === \"negative\" ? confidence * 0.2 : 0.05\n    };\n    return {\n        sentiment,\n        confidence,\n        emotions,\n        keywords: keywords.slice(0, 5)\n    };\n}\n// Enhanced feedback database with AI analysis\nlet feedbacks = [];\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const location = searchParams.get(\"location\");\n        const category = searchParams.get(\"category\");\n        const sentiment = searchParams.get(\"sentiment\");\n        const flagged = searchParams.get(\"flagged\");\n        const urgency = searchParams.get(\"urgency\");\n        const limit = parseInt(searchParams.get(\"limit\") || \"50\");\n        const offset = parseInt(searchParams.get(\"offset\") || \"0\");\n        let filteredFeedbacks = [\n            ...feedbacks\n        ];\n        if (location && location !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.location === location);\n        }\n        if (category && category !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.category === category);\n        }\n        if (sentiment && sentiment !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === sentiment);\n        }\n        if (flagged === \"true\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.flagged);\n        }\n        if (urgency && urgency !== \"All\") {\n            filteredFeedbacks = filteredFeedbacks.filter((f)=>f.urgencyLevel === urgency);\n        }\n        // Sort by timestamp (newest first)\n        filteredFeedbacks.sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n        const paginatedFeedbacks = filteredFeedbacks.slice(offset, offset + limit);\n        // Calculate sentiment statistics\n        const sentimentStats = {\n            positive: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"positive\").length,\n            negative: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"negative\").length,\n            neutral: filteredFeedbacks.filter((f)=>f.aiAnalysis.sentiment === \"neutral\").length,\n            total: filteredFeedbacks.length\n        };\n        // Calculate urgency statistics\n        const urgencyStats = {\n            critical: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"critical\").length,\n            high: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"high\").length,\n            medium: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"medium\").length,\n            low: filteredFeedbacks.filter((f)=>f.urgencyLevel === \"low\").length\n        };\n        // Get sentiment trends\n        const sentimentTrends = SentimentMonitor.getSentimentTrends(location || undefined, category || undefined);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            feedbacks: paginatedFeedbacks,\n            total: filteredFeedbacks.length,\n            sentimentStats,\n            urgencyStats,\n            sentimentTrends,\n            hasMore: offset + limit < filteredFeedbacks.length\n        });\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { userId, userName, location, category, rating, textFeedback, language = \"auto\", voiceData, imageData, emojiRating } = body;\n        // Advanced AI analysis\n        let aiAnalysis;\n        let voiceAnalysis;\n        let imageAnalysis;\n        try {\n            // Convert base64 data to blobs if provided\n            const voiceBlob = voiceData ? new Blob([\n                Buffer.from(voiceData, \"base64\")\n            ], {\n                type: \"audio/wav\"\n            }) : undefined;\n            const imageBlob = imageData ? new Blob([\n                Buffer.from(imageData, \"base64\")\n            ], {\n                type: \"image/jpeg\"\n            }) : undefined;\n            const analysisResults = await analyzeAdvancedFeedback(textFeedback, voiceBlob, imageBlob, language);\n            aiAnalysis = analysisResults.aiAnalysis;\n            voiceAnalysis = analysisResults.voiceAnalysis;\n            imageAnalysis = analysisResults.imageAnalysis;\n        } catch (error) {\n            console.error(\"AI analysis failed, using fallback:\", error);\n            // Fallback to basic analysis\n            aiAnalysis = {\n                sentiment: \"neutral\",\n                confidence: 0.5,\n                emotions: {},\n                keywords: [],\n                language: language || \"en\",\n                toxicity: 0,\n                urgency: \"low\",\n                categories: [],\n                actionableInsights: []\n            };\n        }\n        // Determine urgency level\n        const urgencyLevel = aiAnalysis.urgency || \"low\";\n        // Check for flagging conditions\n        const flagged = aiAnalysis.sentiment === \"negative\" && aiAnalysis.confidence > 0.7 || aiAnalysis.toxicity && aiAnalysis.toxicity > 0.5 || urgencyLevel === \"critical\" || urgencyLevel === \"high\";\n        const newFeedback = {\n            id: feedbacks.length + 1,\n            userId,\n            userName,\n            location,\n            category,\n            rating,\n            textFeedback,\n            language: aiAnalysis.language,\n            voiceData,\n            imageData,\n            emojiRating,\n            aiAnalysis,\n            voiceAnalysis,\n            imageAnalysis,\n            timestamp: new Date().toISOString(),\n            isVerified: false,\n            responseFromVendor: undefined,\n            flagged,\n            urgencyLevel\n        };\n        // Generate auto-response using AI chatbot\n        try {\n            newFeedback.autoResponseGenerated = await FeedbackChatbot.generateResponse(newFeedback);\n        } catch (error) {\n            console.error(\"Auto-response generation failed:\", error);\n        }\n        feedbacks.push(newFeedback);\n        // Add to sentiment monitoring\n        SentimentMonitor.addSentiment(newFeedback);\n        // Trigger alerts for critical issues\n        await AlertSystem.triggerAlert(newFeedback);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            ...newFeedback,\n            followUpQuestions: await FeedbackChatbot.generateFollowUpQuestions(newFeedback)\n        }, {\n            status: 201\n        });\n    } catch (error) {\n        console.error(\"Failed to submit feedback:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to submit feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function PUT(request) {\n    try {\n        const body = await request.json();\n        const { feedbackId, responseFromVendor, flagged } = body;\n        const feedbackIndex = feedbacks.findIndex((f)=>f.id === feedbackId);\n        if (feedbackIndex === -1) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Feedback not found\"\n            }, {\n                status: 404\n            });\n        }\n        feedbacks[feedbackIndex] = {\n            ...feedbacks[feedbackIndex],\n            ...responseFromVendor && {\n                responseFromVendor\n            },\n            ...typeof flagged === \"boolean\" && {\n                flagged\n            },\n            updatedAt: new Date().toISOString()\n        };\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(feedbacks[feedbackIndex]);\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to update feedback\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLEVBQUUsR0FBRzRCO1FBRXBELE1BQU1xQixnQkFBZ0J4RCxVQUFVeUQsU0FBUyxDQUFDN0MsQ0FBQUEsSUFBS0EsRUFBRXFDLEVBQUUsS0FBS007UUFDeEQsSUFBSUMsa0JBQWtCLENBQUMsR0FBRztZQUN4QixPQUFPdkkscURBQVlBLENBQUM4RyxJQUFJLENBQUM7Z0JBQUU1RSxPQUFPO1lBQXFCLEdBQUc7Z0JBQUU4RSxRQUFRO1lBQUk7UUFDMUU7UUFFQWpDLFNBQVMsQ0FBQ3dELGNBQWMsR0FBRztZQUN6QixHQUFHeEQsU0FBUyxDQUFDd0QsY0FBYztZQUMzQixHQUFJSixzQkFBc0I7Z0JBQUVBO1lBQW1CLENBQUM7WUFDaEQsR0FBSSxPQUFPN0MsWUFBWSxhQUFhO2dCQUFFQTtZQUFRLENBQUM7WUFDL0NtRCxXQUFXLElBQUkxQyxPQUFPa0MsV0FBVztRQUNuQztRQUVBLE9BQU9qSSxxREFBWUEsQ0FBQzhHLElBQUksQ0FBQy9CLFNBQVMsQ0FBQ3dELGNBQWM7SUFDbkQsRUFBRSxPQUFPckcsT0FBTztRQUNkLE9BQU9sQyxxREFBWUEsQ0FBQzhHLElBQUksQ0FBQztZQUFFNUUsT0FBTztRQUE0QixHQUFHO1lBQUU4RSxRQUFRO1FBQUk7SUFDakY7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL215LXYwLXByb2plY3QvLi9hcHAvYXBpL2ZlZWRiYWNrL3JvdXRlLnRzPzgxMzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xyXG5pbXBvcnQgeyBhaVNlcnZpY2UsIEFJQW5hbHlzaXNSZXN1bHQsIFZvaWNlQW5hbHlzaXNSZXN1bHQsIEltYWdlQW5hbHlzaXNSZXN1bHQgfSBmcm9tICdAL2xpYi9haS1zZXJ2aWNlcydcclxuXHJcbi8vIEVuaGFuY2VkIGZlZWRiYWNrIGludGVyZmFjZVxyXG5pbnRlcmZhY2UgRW5oYW5jZWRGZWVkYmFjayB7XHJcbiAgaWQ6IG51bWJlclxyXG4gIHVzZXJJZDogc3RyaW5nXHJcbiAgdXNlck5hbWU6IHN0cmluZ1xyXG4gIGxvY2F0aW9uOiBzdHJpbmdcclxuICBjYXRlZ29yeTogc3RyaW5nXHJcbiAgcmF0aW5nOiBudW1iZXJcclxuICB0ZXh0RmVlZGJhY2s/OiBzdHJpbmdcclxuICBsYW5ndWFnZTogc3RyaW5nXHJcbiAgdm9pY2VEYXRhPzogc3RyaW5nXHJcbiAgaW1hZ2VEYXRhPzogc3RyaW5nXHJcbiAgZW1vamlSYXRpbmc/OiBzdHJpbmdcclxuICBhaUFuYWx5c2lzOiBBSUFuYWx5c2lzUmVzdWx0XHJcbiAgdm9pY2VBbmFseXNpcz86IFZvaWNlQW5hbHlzaXNSZXN1bHRcclxuICBpbWFnZUFuYWx5c2lzPzogSW1hZ2VBbmFseXNpc1Jlc3VsdFxyXG4gIHRpbWVzdGFtcDogc3RyaW5nXHJcbiAgaXNWZXJpZmllZDogYm9vbGVhblxyXG4gIHJlc3BvbnNlRnJvbVZlbmRvcj86IHN0cmluZ1xyXG4gIGZsYWdnZWQ6IGJvb2xlYW5cclxuICB1cmdlbmN5TGV2ZWw6ICdsb3cnIHwgJ21lZGl1bScgfCAnaGlnaCcgfCAnY3JpdGljYWwnXHJcbiAgYXV0b1Jlc3BvbnNlR2VuZXJhdGVkPzogc3RyaW5nXHJcbiAgZXNjYWxhdGVkPzogYm9vbGVhblxyXG4gIHJlc29sdmVkQXQ/OiBzdHJpbmdcclxuICBzYXRpc2ZhY3Rpb25Gb2xsb3dVcD86IG51bWJlclxyXG59XHJcblxyXG4vLyBSZWFsLXRpbWUgYWxlcnQgc3lzdGVtXHJcbmNsYXNzIEFsZXJ0U3lzdGVtIHtcclxuICBzdGF0aWMgYXN5bmMgdHJpZ2dlckFsZXJ0KGZlZWRiYWNrOiBFbmhhbmNlZEZlZWRiYWNrKSB7XHJcbiAgICBpZiAoZmVlZGJhY2sudXJnZW5jeUxldmVsID09PSAnY3JpdGljYWwnIHx8IGZlZWRiYWNrLnVyZ2VuY3lMZXZlbCA9PT0gJ2hpZ2gnKSB7XHJcbiAgICAgIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgc2VuZCByZWFsIG5vdGlmaWNhdGlvbnNcclxuICAgICAgY29uc29sZS5sb2coYPCfmqggQ1JJVElDQUwgQUxFUlQ6ICR7ZmVlZGJhY2subG9jYXRpb259IC0gJHtmZWVkYmFjay5jYXRlZ29yeX1gKTtcclxuICAgICAgY29uc29sZS5sb2coYElzc3VlOiAke2ZlZWRiYWNrLmFpQW5hbHlzaXMuYWN0aW9uYWJsZUluc2lnaHRzPy5qb2luKCcsICcpfWApO1xyXG4gICAgICBcclxuICAgICAgLy8gQXV0by1nZW5lcmF0ZSByZXNwb25zZSBmb3IgY3JpdGljYWwgaXNzdWVzXHJcbiAgICAgIGZlZWRiYWNrLmF1dG9SZXNwb25zZUdlbmVyYXRlZCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVBdXRvUmVzcG9uc2UoZmVlZGJhY2spO1xyXG4gICAgICBmZWVkYmFjay5lc2NhbGF0ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFzeW5jIGdlbmVyYXRlQXV0b1Jlc3BvbnNlKGZlZWRiYWNrOiBFbmhhbmNlZEZlZWRiYWNrKTogUHJvbWlzZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IGluc2lnaHRzID0gZmVlZGJhY2suYWlBbmFseXNpcy5hY3Rpb25hYmxlSW5zaWdodHMgfHwgW107XHJcbiAgICBcclxuICAgIGlmIChpbnNpZ2h0cy5zb21lKGkgPT4gaS5pbmNsdWRlcygnVVJHRU5UJykgfHwgaS5pbmNsdWRlcygnU2FmZXR5JykpKSB7XHJcbiAgICAgIHJldHVybiBgVGhhbmsgeW91IGZvciBicmluZ2luZyB0aGlzIHNhZmV0eSBjb25jZXJuIHRvIG91ciBhdHRlbnRpb24uIFdlIGhhdmUgaW1tZWRpYXRlbHkgZXNjYWxhdGVkIHRoaXMgaXNzdWUgdG8gb3VyIHNhZmV0eSB0ZWFtIGFuZCB3aWxsIGFkZHJlc3MgaXQgd2l0aGluIDI0IGhvdXJzLiBZb3VyIHNhZmV0eSBpcyBvdXIgdG9wIHByaW9yaXR5LmA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChmZWVkYmFjay5haUFuYWx5c2lzLnNlbnRpbWVudCA9PT0gJ25lZ2F0aXZlJyAmJiBmZWVkYmFjay5haUFuYWx5c2lzLmNvbmZpZGVuY2UgPiAwLjgpIHtcclxuICAgICAgcmV0dXJuIGBXZSBzaW5jZXJlbHkgYXBvbG9naXplIGZvciB5b3VyIGRpc2FwcG9pbnRpbmcgZXhwZXJpZW5jZS4gV2UgaGF2ZSBmb3J3YXJkZWQgeW91ciBmZWVkYmFjayB0byB0aGUgcmVsZXZhbnQgdGVhbSBmb3IgaW1tZWRpYXRlIGFjdGlvbi4gV2Ugd2lsbCBjb250YWN0IHlvdSB3aXRoaW4gNDggaG91cnMgd2l0aCBhbiB1cGRhdGUgb24gdGhlIGltcHJvdmVtZW50cyBiZWluZyBtYWRlLmA7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBgVGhhbmsgeW91IGZvciB5b3VyIHZhbHVhYmxlIGZlZWRiYWNrLiBXZSBhcHByZWNpYXRlIHlvdSB0YWtpbmcgdGhlIHRpbWUgdG8gc2hhcmUgeW91ciBleHBlcmllbmNlIHdpdGggdXMuYDtcclxuICB9XHJcbn1cclxuXHJcbi8vIEFkdmFuY2VkIEFJLXBvd2VyZWQgZmVlZGJhY2sgYW5hbHlzaXNcclxuYXN5bmMgZnVuY3Rpb24gYW5hbHl6ZUFkdmFuY2VkRmVlZGJhY2soXHJcbiAgdGV4dEZlZWRiYWNrPzogc3RyaW5nLFxyXG4gIHZvaWNlQmxvYj86IEJsb2IsXHJcbiAgaW1hZ2VCbG9iPzogQmxvYixcclxuICBsYW5ndWFnZTogc3RyaW5nID0gJ2F1dG8nXHJcbik6IFByb21pc2U8e1xyXG4gIGFpQW5hbHlzaXM/OiBBSUFuYWx5c2lzUmVzdWx0XHJcbiAgdm9pY2VBbmFseXNpcz86IFZvaWNlQW5hbHlzaXNSZXN1bHRcclxuICBpbWFnZUFuYWx5c2lzPzogSW1hZ2VBbmFseXNpc1Jlc3VsdFxyXG59PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3VsdHM6IGFueSA9IHt9XHJcblxyXG4gICAgLy8gQW5hbHl6ZSB0ZXh0IGlmIHByb3ZpZGVkXHJcbiAgICBpZiAodGV4dEZlZWRiYWNrKSB7XHJcbiAgICAgIHJlc3VsdHMuYWlBbmFseXNpcyA9IGF3YWl0IGFpU2VydmljZS5hbmFseXplVGV4dCh0ZXh0RmVlZGJhY2ssIGxhbmd1YWdlKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIEFuYWx5emUgdm9pY2UgaWYgcHJvdmlkZWRcclxuICAgIGlmICh2b2ljZUJsb2IpIHtcclxuICAgICAgcmVzdWx0cy52b2ljZUFuYWx5c2lzID0gYXdhaXQgYWlTZXJ2aWNlLmFuYWx5emVWb2ljZSh2b2ljZUJsb2IpXHJcbiAgICAgIFxyXG4gICAgICAvLyBJZiBubyB0ZXh0IGZlZWRiYWNrLCB1c2Ugdm9pY2UgdHJhbnNjcmlwdGlvbiBmb3IgdGV4dCBhbmFseXNpc1xyXG4gICAgICBpZiAoIXRleHRGZWVkYmFjayAmJiByZXN1bHRzLnZvaWNlQW5hbHlzaXMudHJhbnNjcmlwdGlvbikge1xyXG4gICAgICAgIHJlc3VsdHMuYWlBbmFseXNpcyA9IGF3YWl0IGFpU2VydmljZS5hbmFseXplVGV4dChyZXN1bHRzLnZvaWNlQW5hbHlzaXMudHJhbnNjcmlwdGlvbiwgbGFuZ3VhZ2UpXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBBbmFseXplIGltYWdlIGlmIHByb3ZpZGVkXHJcbiAgICBpZiAoaW1hZ2VCbG9iKSB7XHJcbiAgICAgIHJlc3VsdHMuaW1hZ2VBbmFseXNpcyA9IGF3YWl0IGFpU2VydmljZS5hbmFseXplSW1hZ2UoaW1hZ2VCbG9iKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHRzXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0FkdmFuY2VkIGZlZWRiYWNrIGFuYWx5c2lzIGZhaWxlZDonLCBlcnJvcilcclxuICAgIFxyXG4gICAgLy8gRmFsbGJhY2sgYW5hbHlzaXNcclxuICAgIGlmICh0ZXh0RmVlZGJhY2spIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBhaUFuYWx5c2lzOiBhd2FpdCBhaVNlcnZpY2UuYW5hbHl6ZVRleHQodGV4dEZlZWRiYWNrLCBsYW5ndWFnZSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aHJvdyBlcnJvclxyXG4gIH1cclxufVxyXG5cclxuLy8gUmVhbC10aW1lIHNlbnRpbWVudCBtb25pdG9yaW5nXHJcbmNsYXNzIFNlbnRpbWVudE1vbml0b3Ige1xyXG4gIHByaXZhdGUgc3RhdGljIHNlbnRpbWVudEhpc3Rvcnk6IEFycmF5PHtcclxuICAgIHRpbWVzdGFtcDogc3RyaW5nXHJcbiAgICBzZW50aW1lbnQ6IHN0cmluZ1xyXG4gICAgY29uZmlkZW5jZTogbnVtYmVyXHJcbiAgICBsb2NhdGlvbjogc3RyaW5nXHJcbiAgICBjYXRlZ29yeTogc3RyaW5nXHJcbiAgfT4gPSBbXVxyXG5cclxuICBzdGF0aWMgYWRkU2VudGltZW50KGZlZWRiYWNrOiBFbmhhbmNlZEZlZWRiYWNrKSB7XHJcbiAgICB0aGlzLnNlbnRpbWVudEhpc3RvcnkucHVzaCh7XHJcbiAgICAgIHRpbWVzdGFtcDogZmVlZGJhY2sudGltZXN0YW1wLFxyXG4gICAgICBzZW50aW1lbnQ6IGZlZWRiYWNrLmFpQW5hbHlzaXMuc2VudGltZW50LFxyXG4gICAgICBjb25maWRlbmNlOiBmZWVkYmFjay5haUFuYWx5c2lzLmNvbmZpZGVuY2UsXHJcbiAgICAgIGxvY2F0aW9uOiBmZWVkYmFjay5sb2NhdGlvbixcclxuICAgICAgY2F0ZWdvcnk6IGZlZWRiYWNrLmNhdGVnb3J5XHJcbiAgICB9KVxyXG5cclxuICAgIC8vIEtlZXAgb25seSBsYXN0IDEwMDAgZW50cmllc1xyXG4gICAgaWYgKHRoaXMuc2VudGltZW50SGlzdG9yeS5sZW5ndGggPiAxMDAwKSB7XHJcbiAgICAgIHRoaXMuc2VudGltZW50SGlzdG9yeSA9IHRoaXMuc2VudGltZW50SGlzdG9yeS5zbGljZSgtMTAwMClcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBmb3Igc2VudGltZW50IHRyZW5kc1xyXG4gICAgdGhpcy5jaGVja1NlbnRpbWVudFRyZW5kcyhmZWVkYmFjay5sb2NhdGlvbiwgZmVlZGJhY2suY2F0ZWdvcnkpXHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY2hlY2tTZW50aW1lbnRUcmVuZHMobG9jYXRpb246IHN0cmluZywgY2F0ZWdvcnk6IHN0cmluZykge1xyXG4gICAgY29uc3QgcmVjZW50RmVlZGJhY2tzID0gdGhpcy5zZW50aW1lbnRIaXN0b3J5XHJcbiAgICAgIC5maWx0ZXIocyA9PiBzLmxvY2F0aW9uID09PSBsb2NhdGlvbiAmJiBzLmNhdGVnb3J5ID09PSBjYXRlZ29yeSlcclxuICAgICAgLnNsaWNlKC0xMCkgLy8gTGFzdCAxMCBmZWVkYmFja3MgZm9yIHRoaXMgbG9jYXRpb24vY2F0ZWdvcnlcclxuXHJcbiAgICBpZiAocmVjZW50RmVlZGJhY2tzLmxlbmd0aCA+PSA1KSB7XHJcbiAgICAgIGNvbnN0IG5lZ2F0aXZlRmVlZGJhY2tzID0gcmVjZW50RmVlZGJhY2tzLmZpbHRlcihzID0+IHMuc2VudGltZW50ID09PSAnbmVnYXRpdmUnKVxyXG4gICAgICBcclxuICAgICAgaWYgKG5lZ2F0aXZlRmVlZGJhY2tzLmxlbmd0aCA+PSAzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coYOKaoO+4jyBUUkVORCBBTEVSVDogSW5jcmVhc2luZyBuZWdhdGl2ZSBzZW50aW1lbnQgZGV0ZWN0ZWQgZm9yICR7bG9jYXRpb259IC0gJHtjYXRlZ29yeX1gKVxyXG4gICAgICAgIC8vIEluIHByb2R1Y3Rpb24sIHRoaXMgd291bGQgdHJpZ2dlciBub3RpZmljYXRpb25zIHRvIHRvdXJpc20gb2ZmaWNpYWxzXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRTZW50aW1lbnRUcmVuZHMobG9jYXRpb24/OiBzdHJpbmcsIGNhdGVnb3J5Pzogc3RyaW5nKSB7XHJcbiAgICBsZXQgZmlsdGVyZWQgPSB0aGlzLnNlbnRpbWVudEhpc3RvcnlcclxuICAgIFxyXG4gICAgaWYgKGxvY2F0aW9uKSB7XHJcbiAgICAgIGZpbHRlcmVkID0gZmlsdGVyZWQuZmlsdGVyKHMgPT4gcy5sb2NhdGlvbiA9PT0gbG9jYXRpb24pXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChjYXRlZ29yeSkge1xyXG4gICAgICBmaWx0ZXJlZCA9IGZpbHRlcmVkLmZpbHRlcihzID0+IHMuY2F0ZWdvcnkgPT09IGNhdGVnb3J5KVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmlsdGVyZWQuc2xpY2UoLTMwKSAvLyBMYXN0IDMwIGVudHJpZXNcclxuICB9XHJcbn1cclxuXHJcbi8vIEFJLXBvd2VyZWQgY2hhdGJvdCBmb3IgaW5zdGFudCByZXNwb25zZXNcclxuY2xhc3MgRmVlZGJhY2tDaGF0Ym90IHtcclxuICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVSZXNwb25zZShmZWVkYmFjazogRW5oYW5jZWRGZWVkYmFjayk6IFByb21pc2U8c3RyaW5nPiB7XHJcbiAgICBjb25zdCB7IGFpQW5hbHlzaXMsIGxvY2F0aW9uLCBjYXRlZ29yeSB9ID0gZmVlZGJhY2tcclxuICAgIFxyXG4gICAgLy8gR2VuZXJhdGUgY29udGV4dHVhbCByZXNwb25zZSBiYXNlZCBvbiBBSSBhbmFseXNpc1xyXG4gICAgaWYgKGFpQW5hbHlzaXMudXJnZW5jeSA9PT0gJ2NyaXRpY2FsJykge1xyXG4gICAgICByZXR1cm4gYFRoYW5rIHlvdSBmb3IgdGhpcyBjcml0aWNhbCBmZWVkYmFjayBhYm91dCAke2xvY2F0aW9ufS4gV2UgYXJlIGltbWVkaWF0ZWx5IGFkZHJlc3NpbmcgdGhlICR7YWlBbmFseXNpcy5jYXRlZ29yaWVzPy5qb2luKCcsICcpfSBpc3N1ZXMgeW91J3ZlIG1lbnRpb25lZC4gQSBzZW5pb3Igb2ZmaWNpYWwgd2lsbCBjb250YWN0IHlvdSB3aXRoaW4gMiBob3Vycy5gXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChhaUFuYWx5c2lzLnNlbnRpbWVudCA9PT0gJ3Bvc2l0aXZlJykge1xyXG4gICAgICByZXR1cm4gYFdlJ3JlIGRlbGlnaHRlZCB0byBoZWFyIGFib3V0IHlvdXIgcG9zaXRpdmUgZXhwZXJpZW5jZSBhdCAke2xvY2F0aW9ufSEgVGhhbmsgeW91IGZvciBoaWdobGlnaHRpbmcgJHthaUFuYWx5c2lzLmtleXdvcmRzLnNsaWNlKDAsIDMpLmpvaW4oJywgJyl9LiBXZSdsbCBzaGFyZSB5b3VyIGZlZWRiYWNrIHdpdGggb3VyIHRlYW0uYFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoYWlBbmFseXNpcy5zZW50aW1lbnQgPT09ICduZWdhdGl2ZScpIHtcclxuICAgICAgY29uc3QgaXNzdWVzID0gYWlBbmFseXNpcy5hY3Rpb25hYmxlSW5zaWdodHM/LnNsaWNlKDAsIDIpLmpvaW4oJyBhbmQgJykgfHwgJ3RoZSBpc3N1ZXMgeW91IG1lbnRpb25lZCdcclxuICAgICAgcmV0dXJuIGBXZSBzaW5jZXJlbHkgYXBvbG9naXplIGZvciB5b3VyIGV4cGVyaWVuY2UgYXQgJHtsb2NhdGlvbn0uIFdlJ3JlIHRha2luZyBpbW1lZGlhdGUgYWN0aW9uIG9uICR7aXNzdWVzfS4gWW91IGNhbiBleHBlY3QgYW4gdXBkYXRlIHdpdGhpbiAyNC00OCBob3Vycy5gXHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBgVGhhbmsgeW91IGZvciB5b3VyIGZlZWRiYWNrIGFib3V0ICR7bG9jYXRpb259LiBZb3VyIGluc2lnaHRzIGFib3V0ICR7Y2F0ZWdvcnkudG9Mb3dlckNhc2UoKX0gYXJlIHZhbHVhYmxlIGZvciBpbXByb3Zpbmcgb3VyIHRvdXJpc20gc2VydmljZXMuYFxyXG4gIH1cclxuICBcclxuICBzdGF0aWMgYXN5bmMgZ2VuZXJhdGVGb2xsb3dVcFF1ZXN0aW9ucyhmZWVkYmFjazogRW5oYW5jZWRGZWVkYmFjayk6IFByb21pc2U8c3RyaW5nW10+IHtcclxuICAgIGNvbnN0IHF1ZXN0aW9uczogc3RyaW5nW10gPSBbXVxyXG4gICAgXHJcbiAgICBpZiAoZmVlZGJhY2suYWlBbmFseXNpcy5zZW50aW1lbnQgPT09ICduZWdhdGl2ZScpIHtcclxuICAgICAgcXVlc3Rpb25zLnB1c2goJ1doYXQgc3BlY2lmaWMgc3RlcHMgd291bGQgeW91IGxpa2UgdG8gc2VlIGltcGxlbWVudGVkIHRvIGltcHJvdmUgdGhpcyBleHBlcmllbmNlPycpXHJcbiAgICAgIHF1ZXN0aW9ucy5wdXNoKCdXb3VsZCB5b3UgYmUgd2lsbGluZyB0byByZXZpc2l0IHRoaXMgbG9jYXRpb24gaWYgaW1wcm92ZW1lbnRzIHdlcmUgbWFkZT8nKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAoZmVlZGJhY2suYWlBbmFseXNpcy5jYXRlZ29yaWVzPy5pbmNsdWRlcygnc2VydmljZSBxdWFsaXR5JykpIHtcclxuICAgICAgcXVlc3Rpb25zLnB1c2goJ0NhbiB5b3UgcHJvdmlkZSBtb3JlIGRldGFpbHMgYWJvdXQgdGhlIHN0YWZmIGludGVyYWN0aW9uPycpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChmZWVkYmFjay5haUFuYWx5c2lzLmNhdGVnb3JpZXM/LmluY2x1ZGVzKCdjbGVhbmxpbmVzcycpKSB7XHJcbiAgICAgIHF1ZXN0aW9ucy5wdXNoKCdXaGljaCBzcGVjaWZpYyBhcmVhcyBuZWVkIGF0dGVudGlvbiByZWdhcmRpbmcgY2xlYW5saW5lc3M/JylcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIHF1ZXN0aW9ucy5zbGljZSgwLCAzKVxyXG4gIH1cclxufVxyXG5cclxuLy8gRmFsbGJhY2sgcnVsZS1iYXNlZCBzZW50aW1lbnQgYW5hbHlzaXNcclxuZnVuY3Rpb24gZmFsbGJhY2tTZW50aW1lbnRBbmFseXNpcyh0ZXh0OiBzdHJpbmcsIGxhbmd1YWdlOiBzdHJpbmcpOiB7XHJcbiAgc2VudGltZW50OiAncG9zaXRpdmUnIHwgJ25lZ2F0aXZlJyB8ICduZXV0cmFsJ1xyXG4gIGNvbmZpZGVuY2U6IG51bWJlclxyXG4gIGVtb3Rpb25zOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9XHJcbiAga2V5d29yZHM6IHN0cmluZ1tdXHJcbn0ge1xyXG4gIGNvbnN0IHBvc2l0aXZlV29yZHMgPSBbJ2dvb2QnLCAnZ3JlYXQnLCAnZXhjZWxsZW50JywgJ2FtYXppbmcnLCAnd29uZGVyZnVsJywgJ2JlYXV0aWZ1bCcsICdsb3ZlJywgJ3BlcmZlY3QnLCAnYXdlc29tZScsICdmYW50YXN0aWMnXVxyXG4gIGNvbnN0IG5lZ2F0aXZlV29yZHMgPSBbJ2JhZCcsICd0ZXJyaWJsZScsICdhd2Z1bCcsICdob3JyaWJsZScsICdoYXRlJywgJ3dvcnN0JywgJ2Rpc2FwcG9pbnRpbmcnLCAncG9vcicsICdkaXJ0eScsICd1bnNhZmUnXVxyXG4gIFxyXG4gIC8vIEhpbmRpIHBvc2l0aXZlL25lZ2F0aXZlIHdvcmRzXHJcbiAgY29uc3QgaGluZGlQb3NpdGl2ZSA9IFsn4KSF4KSa4KWN4KSb4KS+JywgJ+CkrOCkueClgeCkpCcsICfgpLjgpYHgpILgpKbgpLAnLCAn4KSW4KWB4KS2JywgJ+CkquCljeCksOCkuOCkqOCljeCkqCcsICfgpIngpKTgpY3gpJXgpYPgpLfgpY3gpJ8nXVxyXG4gIGNvbnN0IGhpbmRpTmVnYXRpdmUgPSBbJ+CkrOClgeCksOCkvicsICfgpJfgpILgpKbgpL4nLCAn4KSW4KSw4KS+4KSsJywgJ+CkpuClgeCkluClgCcsICfgpKjgpL/gpLDgpL7gpLYnXVxyXG5cclxuICBjb25zdCB3b3JkcyA9IHRleHQudG9Mb3dlckNhc2UoKS5zcGxpdCgvXFxzKy8pXHJcbiAgbGV0IHBvc2l0aXZlQ291bnQgPSAwXHJcbiAgbGV0IG5lZ2F0aXZlQ291bnQgPSAwXHJcbiAgbGV0IGtleXdvcmRzOiBzdHJpbmdbXSA9IFtdXHJcblxyXG4gIHdvcmRzLmZvckVhY2god29yZCA9PiB7XHJcbiAgICBpZiAocG9zaXRpdmVXb3Jkcy5pbmNsdWRlcyh3b3JkKSB8fCBoaW5kaVBvc2l0aXZlLmluY2x1ZGVzKHdvcmQpKSB7XHJcbiAgICAgIHBvc2l0aXZlQ291bnQrK1xyXG4gICAgICBrZXl3b3Jkcy5wdXNoKHdvcmQpXHJcbiAgICB9XHJcbiAgICBpZiAobmVnYXRpdmVXb3Jkcy5pbmNsdWRlcyh3b3JkKSB8fCBoaW5kaU5lZ2F0aXZlLmluY2x1ZGVzKHdvcmQpKSB7XHJcbiAgICAgIG5lZ2F0aXZlQ291bnQrK1xyXG4gICAgICBrZXl3b3Jkcy5wdXNoKHdvcmQpXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgbGV0IHNlbnRpbWVudDogJ3Bvc2l0aXZlJyB8ICduZWdhdGl2ZScgfCAnbmV1dHJhbCcgPSAnbmV1dHJhbCdcclxuICBsZXQgY29uZmlkZW5jZSA9IDAuNVxyXG5cclxuICBpZiAocG9zaXRpdmVDb3VudCA+IG5lZ2F0aXZlQ291bnQpIHtcclxuICAgIHNlbnRpbWVudCA9ICdwb3NpdGl2ZSdcclxuICAgIGNvbmZpZGVuY2UgPSBNYXRoLm1pbigwLjksIDAuNSArIChwb3NpdGl2ZUNvdW50IC0gbmVnYXRpdmVDb3VudCkgKiAwLjEpXHJcbiAgfSBlbHNlIGlmIChuZWdhdGl2ZUNvdW50ID4gcG9zaXRpdmVDb3VudCkge1xyXG4gICAgc2VudGltZW50ID0gJ25lZ2F0aXZlJ1xyXG4gICAgY29uZmlkZW5jZSA9IE1hdGgubWluKDAuOSwgMC41ICsgKG5lZ2F0aXZlQ291bnQgLSBwb3NpdGl2ZUNvdW50KSAqIDAuMSlcclxuICB9XHJcblxyXG4gIGNvbnN0IGVtb3Rpb25zID0ge1xyXG4gICAgam95OiBzZW50aW1lbnQgPT09ICdwb3NpdGl2ZScgPyBjb25maWRlbmNlICogMC44IDogMC4xLFxyXG4gICAgYW5nZXI6IHNlbnRpbWVudCA9PT0gJ25lZ2F0aXZlJyA/IGNvbmZpZGVuY2UgKiAwLjYgOiAwLjEsXHJcbiAgICBzYWRuZXNzOiBzZW50aW1lbnQgPT09ICduZWdhdGl2ZScgPyBjb25maWRlbmNlICogMC40IDogMC4xLFxyXG4gICAgc3VycHJpc2U6IDAuMixcclxuICAgIGZlYXI6IHNlbnRpbWVudCA9PT0gJ25lZ2F0aXZlJyA/IGNvbmZpZGVuY2UgKiAwLjMgOiAwLjA1LFxyXG4gICAgZGlzZ3VzdDogc2VudGltZW50ID09PSAnbmVnYXRpdmUnID8gY29uZmlkZW5jZSAqIDAuMiA6IDAuMDVcclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBzZW50aW1lbnQsXHJcbiAgICBjb25maWRlbmNlLFxyXG4gICAgZW1vdGlvbnMsXHJcbiAgICBrZXl3b3Jkczoga2V5d29yZHMuc2xpY2UoMCwgNSlcclxuICB9XHJcbn1cclxuXHJcbi8vIEVuaGFuY2VkIGZlZWRiYWNrIGRhdGFiYXNlIHdpdGggQUkgYW5hbHlzaXNcclxubGV0IGZlZWRiYWNrczogRW5oYW5jZWRGZWVkYmFja1tdID0gW11cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBHRVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgeyBzZWFyY2hQYXJhbXMgfSA9IG5ldyBVUkwocmVxdWVzdC51cmwpXHJcbiAgICBjb25zdCBsb2NhdGlvbiA9IHNlYXJjaFBhcmFtcy5nZXQoJ2xvY2F0aW9uJylcclxuICAgIGNvbnN0IGNhdGVnb3J5ID0gc2VhcmNoUGFyYW1zLmdldCgnY2F0ZWdvcnknKVxyXG4gICAgY29uc3Qgc2VudGltZW50ID0gc2VhcmNoUGFyYW1zLmdldCgnc2VudGltZW50JylcclxuICAgIGNvbnN0IGZsYWdnZWQgPSBzZWFyY2hQYXJhbXMuZ2V0KCdmbGFnZ2VkJylcclxuICAgIGNvbnN0IHVyZ2VuY3kgPSBzZWFyY2hQYXJhbXMuZ2V0KCd1cmdlbmN5JylcclxuICAgIGNvbnN0IGxpbWl0ID0gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnbGltaXQnKSB8fCAnNTAnKVxyXG4gICAgY29uc3Qgb2Zmc2V0ID0gcGFyc2VJbnQoc2VhcmNoUGFyYW1zLmdldCgnb2Zmc2V0JykgfHwgJzAnKVxyXG5cclxuICAgIGxldCBmaWx0ZXJlZEZlZWRiYWNrcyA9IFsuLi5mZWVkYmFja3NdXHJcblxyXG4gICAgaWYgKGxvY2F0aW9uICYmIGxvY2F0aW9uICE9PSAnQWxsJykge1xyXG4gICAgICBmaWx0ZXJlZEZlZWRiYWNrcyA9IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYubG9jYXRpb24gPT09IGxvY2F0aW9uKVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChjYXRlZ29yeSAmJiBjYXRlZ29yeSAhPT0gJ0FsbCcpIHtcclxuICAgICAgZmlsdGVyZWRGZWVkYmFja3MgPSBmaWx0ZXJlZEZlZWRiYWNrcy5maWx0ZXIoZiA9PiBmLmNhdGVnb3J5ID09PSBjYXRlZ29yeSlcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2VudGltZW50ICYmIHNlbnRpbWVudCAhPT0gJ0FsbCcpIHtcclxuICAgICAgZmlsdGVyZWRGZWVkYmFja3MgPSBmaWx0ZXJlZEZlZWRiYWNrcy5maWx0ZXIoZiA9PiBmLmFpQW5hbHlzaXMuc2VudGltZW50ID09PSBzZW50aW1lbnQpXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZsYWdnZWQgPT09ICd0cnVlJykge1xyXG4gICAgICBmaWx0ZXJlZEZlZWRiYWNrcyA9IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYuZmxhZ2dlZClcclxuICAgIH1cclxuXHJcbiAgICBpZiAodXJnZW5jeSAmJiB1cmdlbmN5ICE9PSAnQWxsJykge1xyXG4gICAgICBmaWx0ZXJlZEZlZWRiYWNrcyA9IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYudXJnZW5jeUxldmVsID09PSB1cmdlbmN5KVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFNvcnQgYnkgdGltZXN0YW1wIChuZXdlc3QgZmlyc3QpXHJcbiAgICBmaWx0ZXJlZEZlZWRiYWNrcy5zb3J0KChhLCBiKSA9PiBuZXcgRGF0ZShiLnRpbWVzdGFtcCkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYS50aW1lc3RhbXApLmdldFRpbWUoKSlcclxuXHJcbiAgICBjb25zdCBwYWdpbmF0ZWRGZWVkYmFja3MgPSBmaWx0ZXJlZEZlZWRiYWNrcy5zbGljZShvZmZzZXQsIG9mZnNldCArIGxpbWl0KVxyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBzZW50aW1lbnQgc3RhdGlzdGljc1xyXG4gICAgY29uc3Qgc2VudGltZW50U3RhdHMgPSB7XHJcbiAgICAgIHBvc2l0aXZlOiBmaWx0ZXJlZEZlZWRiYWNrcy5maWx0ZXIoZiA9PiBmLmFpQW5hbHlzaXMuc2VudGltZW50ID09PSAncG9zaXRpdmUnKS5sZW5ndGgsXHJcbiAgICAgIG5lZ2F0aXZlOiBmaWx0ZXJlZEZlZWRiYWNrcy5maWx0ZXIoZiA9PiBmLmFpQW5hbHlzaXMuc2VudGltZW50ID09PSAnbmVnYXRpdmUnKS5sZW5ndGgsXHJcbiAgICAgIG5ldXRyYWw6IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYuYWlBbmFseXNpcy5zZW50aW1lbnQgPT09ICduZXV0cmFsJykubGVuZ3RoLFxyXG4gICAgICB0b3RhbDogZmlsdGVyZWRGZWVkYmFja3MubGVuZ3RoXHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHVyZ2VuY3kgc3RhdGlzdGljc1xyXG4gICAgY29uc3QgdXJnZW5jeVN0YXRzID0ge1xyXG4gICAgICBjcml0aWNhbDogZmlsdGVyZWRGZWVkYmFja3MuZmlsdGVyKGYgPT4gZi51cmdlbmN5TGV2ZWwgPT09ICdjcml0aWNhbCcpLmxlbmd0aCxcclxuICAgICAgaGlnaDogZmlsdGVyZWRGZWVkYmFja3MuZmlsdGVyKGYgPT4gZi51cmdlbmN5TGV2ZWwgPT09ICdoaWdoJykubGVuZ3RoLFxyXG4gICAgICBtZWRpdW06IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYudXJnZW5jeUxldmVsID09PSAnbWVkaXVtJykubGVuZ3RoLFxyXG4gICAgICBsb3c6IGZpbHRlcmVkRmVlZGJhY2tzLmZpbHRlcihmID0+IGYudXJnZW5jeUxldmVsID09PSAnbG93JykubGVuZ3RoXHJcbiAgICB9XHJcblxyXG4gICAgLy8gR2V0IHNlbnRpbWVudCB0cmVuZHNcclxuICAgIGNvbnN0IHNlbnRpbWVudFRyZW5kcyA9IFNlbnRpbWVudE1vbml0b3IuZ2V0U2VudGltZW50VHJlbmRzKGxvY2F0aW9uIHx8IHVuZGVmaW5lZCwgY2F0ZWdvcnkgfHwgdW5kZWZpbmVkKVxyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIGZlZWRiYWNrczogcGFnaW5hdGVkRmVlZGJhY2tzLFxyXG4gICAgICB0b3RhbDogZmlsdGVyZWRGZWVkYmFja3MubGVuZ3RoLFxyXG4gICAgICBzZW50aW1lbnRTdGF0cyxcclxuICAgICAgdXJnZW5jeVN0YXRzLFxyXG4gICAgICBzZW50aW1lbnRUcmVuZHMsXHJcbiAgICAgIGhhc01vcmU6IG9mZnNldCArIGxpbWl0IDwgZmlsdGVyZWRGZWVkYmFja3MubGVuZ3RoXHJcbiAgICB9KVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBmZXRjaCBmZWVkYmFjaycgfSwgeyBzdGF0dXM6IDUwMCB9KVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXHJcbiAgICBjb25zdCB7IHVzZXJJZCwgdXNlck5hbWUsIGxvY2F0aW9uLCBjYXRlZ29yeSwgcmF0aW5nLCB0ZXh0RmVlZGJhY2ssIGxhbmd1YWdlID0gJ2F1dG8nLCB2b2ljZURhdGEsIGltYWdlRGF0YSwgZW1vamlSYXRpbmcgfSA9IGJvZHlcclxuXHJcbiAgICAvLyBBZHZhbmNlZCBBSSBhbmFseXNpc1xyXG4gICAgbGV0IGFpQW5hbHlzaXM6IEFJQW5hbHlzaXNSZXN1bHRcclxuICAgIGxldCB2b2ljZUFuYWx5c2lzOiBWb2ljZUFuYWx5c2lzUmVzdWx0IHwgdW5kZWZpbmVkXHJcbiAgICBsZXQgaW1hZ2VBbmFseXNpczogSW1hZ2VBbmFseXNpc1Jlc3VsdCB8IHVuZGVmaW5lZFxyXG5cclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIENvbnZlcnQgYmFzZTY0IGRhdGEgdG8gYmxvYnMgaWYgcHJvdmlkZWRcclxuICAgICAgY29uc3Qgdm9pY2VCbG9iID0gdm9pY2VEYXRhID8gbmV3IEJsb2IoW0J1ZmZlci5mcm9tKHZvaWNlRGF0YSwgJ2Jhc2U2NCcpXSwgeyB0eXBlOiAnYXVkaW8vd2F2JyB9KSA6IHVuZGVmaW5lZFxyXG4gICAgICBjb25zdCBpbWFnZUJsb2IgPSBpbWFnZURhdGEgPyBuZXcgQmxvYihbQnVmZmVyLmZyb20oaW1hZ2VEYXRhLCAnYmFzZTY0JyldLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KSA6IHVuZGVmaW5lZFxyXG5cclxuICAgICAgY29uc3QgYW5hbHlzaXNSZXN1bHRzID0gYXdhaXQgYW5hbHl6ZUFkdmFuY2VkRmVlZGJhY2sodGV4dEZlZWRiYWNrLCB2b2ljZUJsb2IsIGltYWdlQmxvYiwgbGFuZ3VhZ2UpXHJcbiAgICAgIGFpQW5hbHlzaXMgPSBhbmFseXNpc1Jlc3VsdHMuYWlBbmFseXNpcyFcclxuICAgICAgdm9pY2VBbmFseXNpcyA9IGFuYWx5c2lzUmVzdWx0cy52b2ljZUFuYWx5c2lzXHJcbiAgICAgIGltYWdlQW5hbHlzaXMgPSBhbmFseXNpc1Jlc3VsdHMuaW1hZ2VBbmFseXNpc1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignQUkgYW5hbHlzaXMgZmFpbGVkLCB1c2luZyBmYWxsYmFjazonLCBlcnJvcilcclxuICAgICAgLy8gRmFsbGJhY2sgdG8gYmFzaWMgYW5hbHlzaXNcclxuICAgICAgYWlBbmFseXNpcyA9IHtcclxuICAgICAgICBzZW50aW1lbnQ6ICduZXV0cmFsJyxcclxuICAgICAgICBjb25maWRlbmNlOiAwLjUsXHJcbiAgICAgICAgZW1vdGlvbnM6IHt9LFxyXG4gICAgICAgIGtleXdvcmRzOiBbXSxcclxuICAgICAgICBsYW5ndWFnZTogbGFuZ3VhZ2UgfHwgJ2VuJyxcclxuICAgICAgICB0b3hpY2l0eTogMCxcclxuICAgICAgICB1cmdlbmN5OiAnbG93JyxcclxuICAgICAgICBjYXRlZ29yaWVzOiBbXSxcclxuICAgICAgICBhY3Rpb25hYmxlSW5zaWdodHM6IFtdXHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBEZXRlcm1pbmUgdXJnZW5jeSBsZXZlbFxyXG4gICAgY29uc3QgdXJnZW5jeUxldmVsID0gYWlBbmFseXNpcy51cmdlbmN5IHx8ICdsb3cnXHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIGZsYWdnaW5nIGNvbmRpdGlvbnNcclxuICAgIGNvbnN0IGZsYWdnZWQgPSAoYWlBbmFseXNpcy5zZW50aW1lbnQgPT09ICduZWdhdGl2ZScgJiYgYWlBbmFseXNpcy5jb25maWRlbmNlID4gMC43KSB8fFxyXG4gICAgICAgICAgICAgICAgICAgKGFpQW5hbHlzaXMudG94aWNpdHkgJiYgYWlBbmFseXNpcy50b3hpY2l0eSA+IDAuNSkgfHxcclxuICAgICAgICAgICAgICAgICAgIHVyZ2VuY3lMZXZlbCA9PT0gJ2NyaXRpY2FsJyB8fCB1cmdlbmN5TGV2ZWwgPT09ICdoaWdoJ1xyXG5cclxuICAgIGNvbnN0IG5ld0ZlZWRiYWNrOiBFbmhhbmNlZEZlZWRiYWNrID0ge1xyXG4gICAgICBpZDogZmVlZGJhY2tzLmxlbmd0aCArIDEsXHJcbiAgICAgIHVzZXJJZCxcclxuICAgICAgdXNlck5hbWUsXHJcbiAgICAgIGxvY2F0aW9uLFxyXG4gICAgICBjYXRlZ29yeSxcclxuICAgICAgcmF0aW5nLFxyXG4gICAgICB0ZXh0RmVlZGJhY2ssXHJcbiAgICAgIGxhbmd1YWdlOiBhaUFuYWx5c2lzLmxhbmd1YWdlLFxyXG4gICAgICB2b2ljZURhdGEsXHJcbiAgICAgIGltYWdlRGF0YSxcclxuICAgICAgZW1vamlSYXRpbmcsXHJcbiAgICAgIGFpQW5hbHlzaXMsXHJcbiAgICAgIHZvaWNlQW5hbHlzaXMsXHJcbiAgICAgIGltYWdlQW5hbHlzaXMsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBpc1ZlcmlmaWVkOiBmYWxzZSxcclxuICAgICAgcmVzcG9uc2VGcm9tVmVuZG9yOiB1bmRlZmluZWQsXHJcbiAgICAgIGZsYWdnZWQsXHJcbiAgICAgIHVyZ2VuY3lMZXZlbFxyXG4gICAgfVxyXG5cclxuICAgIC8vIEdlbmVyYXRlIGF1dG8tcmVzcG9uc2UgdXNpbmcgQUkgY2hhdGJvdFxyXG4gICAgdHJ5IHtcclxuICAgICAgbmV3RmVlZGJhY2suYXV0b1Jlc3BvbnNlR2VuZXJhdGVkID0gYXdhaXQgRmVlZGJhY2tDaGF0Ym90LmdlbmVyYXRlUmVzcG9uc2UobmV3RmVlZGJhY2spXHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdBdXRvLXJlc3BvbnNlIGdlbmVyYXRpb24gZmFpbGVkOicsIGVycm9yKVxyXG4gICAgfVxyXG5cclxuICAgIGZlZWRiYWNrcy5wdXNoKG5ld0ZlZWRiYWNrKVxyXG5cclxuICAgIC8vIEFkZCB0byBzZW50aW1lbnQgbW9uaXRvcmluZ1xyXG4gICAgU2VudGltZW50TW9uaXRvci5hZGRTZW50aW1lbnQobmV3RmVlZGJhY2spXHJcblxyXG4gICAgLy8gVHJpZ2dlciBhbGVydHMgZm9yIGNyaXRpY2FsIGlzc3Vlc1xyXG4gICAgYXdhaXQgQWxlcnRTeXN0ZW0udHJpZ2dlckFsZXJ0KG5ld0ZlZWRiYWNrKVxyXG5cclxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7XHJcbiAgICAgIC4uLm5ld0ZlZWRiYWNrLFxyXG4gICAgICBmb2xsb3dVcFF1ZXN0aW9uczogYXdhaXQgRmVlZGJhY2tDaGF0Ym90LmdlbmVyYXRlRm9sbG93VXBRdWVzdGlvbnMobmV3RmVlZGJhY2spXHJcbiAgICB9LCB7IHN0YXR1czogMjAxIH0pXHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBzdWJtaXQgZmVlZGJhY2s6JywgZXJyb3IpXHJcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZhaWxlZCB0byBzdWJtaXQgZmVlZGJhY2snIH0sIHsgc3RhdHVzOiA1MDAgfSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQVVQocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXHJcbiAgICBjb25zdCB7IGZlZWRiYWNrSWQsIHJlc3BvbnNlRnJvbVZlbmRvciwgZmxhZ2dlZCB9ID0gYm9keVxyXG5cclxuICAgIGNvbnN0IGZlZWRiYWNrSW5kZXggPSBmZWVkYmFja3MuZmluZEluZGV4KGYgPT4gZi5pZCA9PT0gZmVlZGJhY2tJZClcclxuICAgIGlmIChmZWVkYmFja0luZGV4ID09PSAtMSkge1xyXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogJ0ZlZWRiYWNrIG5vdCBmb3VuZCcgfSwgeyBzdGF0dXM6IDQwNCB9KVxyXG4gICAgfVxyXG5cclxuICAgIGZlZWRiYWNrc1tmZWVkYmFja0luZGV4XSA9IHtcclxuICAgICAgLi4uZmVlZGJhY2tzW2ZlZWRiYWNrSW5kZXhdLFxyXG4gICAgICAuLi4ocmVzcG9uc2VGcm9tVmVuZG9yICYmIHsgcmVzcG9uc2VGcm9tVmVuZG9yIH0pLFxyXG4gICAgICAuLi4odHlwZW9mIGZsYWdnZWQgPT09ICdib29sZWFuJyAmJiB7IGZsYWdnZWQgfSksXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGZlZWRiYWNrc1tmZWVkYmFja0luZGV4XSlcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgZXJyb3I6ICdGYWlsZWQgdG8gdXBkYXRlIGZlZWRiYWNrJyB9LCB7IHN0YXR1czogNTAwIH0pXHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJOZXh0UmVzcG9uc2UiLCJhaVNlcnZpY2UiLCJBbGVydFN5c3RlbSIsInRyaWdnZXJBbGVydCIsImZlZWRiYWNrIiwidXJnZW5jeUxldmVsIiwiY29uc29sZSIsImxvZyIsImxvY2F0aW9uIiwiY2F0ZWdvcnkiLCJhaUFuYWx5c2lzIiwiYWN0aW9uYWJsZUluc2lnaHRzIiwiam9pbiIsImF1dG9SZXNwb25zZUdlbmVyYXRlZCIsImdlbmVyYXRlQXV0b1Jlc3BvbnNlIiwiZXNjYWxhdGVkIiwiaW5zaWdodHMiLCJzb21lIiwiaSIsImluY2x1ZGVzIiwic2VudGltZW50IiwiY29uZmlkZW5jZSIsImFuYWx5emVBZHZhbmNlZEZlZWRiYWNrIiwidGV4dEZlZWRiYWNrIiwidm9pY2VCbG9iIiwiaW1hZ2VCbG9iIiwibGFuZ3VhZ2UiLCJyZXN1bHRzIiwiYW5hbHl6ZVRleHQiLCJ2b2ljZUFuYWx5c2lzIiwiYW5hbHl6ZVZvaWNlIiwidHJhbnNjcmlwdGlvbiIsImltYWdlQW5hbHlzaXMiLCJhbmFseXplSW1hZ2UiLCJlcnJvciIsIlNlbnRpbWVudE1vbml0b3IiLCJzZW50aW1lbnRIaXN0b3J5IiwiYWRkU2VudGltZW50IiwicHVzaCIsInRpbWVzdGFtcCIsImxlbmd0aCIsInNsaWNlIiwiY2hlY2tTZW50aW1lbnRUcmVuZHMiLCJyZWNlbnRGZWVkYmFja3MiLCJmaWx0ZXIiLCJzIiwibmVnYXRpdmVGZWVkYmFja3MiLCJnZXRTZW50aW1lbnRUcmVuZHMiLCJmaWx0ZXJlZCIsIkZlZWRiYWNrQ2hhdGJvdCIsImdlbmVyYXRlUmVzcG9uc2UiLCJ1cmdlbmN5IiwiY2F0ZWdvcmllcyIsImtleXdvcmRzIiwiaXNzdWVzIiwidG9Mb3dlckNhc2UiLCJnZW5lcmF0ZUZvbGxvd1VwUXVlc3Rpb25zIiwicXVlc3Rpb25zIiwiZmFsbGJhY2tTZW50aW1lbnRBbmFseXNpcyIsInRleHQiLCJwb3NpdGl2ZVdvcmRzIiwibmVnYXRpdmVXb3JkcyIsImhpbmRpUG9zaXRpdmUiLCJoaW5kaU5lZ2F0aXZlIiwid29yZHMiLCJzcGxpdCIsInBvc2l0aXZlQ291bnQiLCJuZWdhdGl2ZUNvdW50IiwiZm9yRWFjaCIsIndvcmQiLCJNYXRoIiwibWluIiwiZW1vdGlvbnMiLCJqb3kiLCJhbmdlciIsInNhZG5lc3MiLCJzdXJwcmlzZSIsImZlYXIiLCJkaXNndXN0IiwiZmVlZGJhY2tzIiwiR0VUIiwicmVxdWVzdCIsInNlYXJjaFBhcmFtcyIsIlVSTCIsInVybCIsImdldCIsImZsYWdnZWQiLCJsaW1pdCIsInBhcnNlSW50Iiwib2Zmc2V0IiwiZmlsdGVyZWRGZWVkYmFja3MiLCJmIiwic29ydCIsImEiLCJiIiwiRGF0ZSIsImdldFRpbWUiLCJwYWdpbmF0ZWRGZWVkYmFja3MiLCJzZW50aW1lbnRTdGF0cyIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJuZXV0cmFsIiwidG90YWwiLCJ1cmdlbmN5U3RhdHMiLCJjcml0aWNhbCIsImhpZ2giLCJtZWRpdW0iLCJsb3ciLCJzZW50aW1lbnRUcmVuZHMiLCJ1bmRlZmluZWQiLCJqc29uIiwiaGFzTW9yZSIsInN0YXR1cyIsIlBPU1QiLCJib2R5IiwidXNlcklkIiwidXNlck5hbWUiLCJyYXRpbmciLCJ2b2ljZURhdGEiLCJpbWFnZURhdGEiLCJlbW9qaVJhdGluZyIsIkJsb2IiLCJCdWZmZXIiLCJmcm9tIiwidHlwZSIsImFuYWx5c2lzUmVzdWx0cyIsInRveGljaXR5IiwibmV3RmVlZGJhY2siLCJpZCIsInRvSVNPU3RyaW5nIiwiaXNWZXJpZmllZCIsInJlc3BvbnNlRnJvbVZlbmRvciIsImZvbGxvd1VwUXVlc3Rpb25zIiwiUFVUIiwiZmVlZGJhY2tJZCIsImZlZWRiYWNrSW5kZXgiLCJmaW5kSW5kZXgiLCJ1cGRhdGVkQXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/feedback/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/ai-services.ts":
/*!****************************!*\
  !*** ./lib/ai-services.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedAIService: () => (/* binding */ AdvancedAIService),\n/* harmony export */   aiService: () => (/* binding */ aiService)\n/* harmony export */ });\n// Advanced AI Services for Tourism Jharkhand\n// Integrates multiple AI APIs for comprehensive analysis\n// Advanced multilingual sentiment analysis with multiple AI models\nclass AdvancedAIService {\n    constructor(){\n        this.huggingFaceKey = process.env.HUGGINGFACE_API_KEY || \"\";\n        this.openAIKey = process.env.OPENAI_API_KEY;\n        this.googleCloudKey = process.env.GOOGLE_CLOUD_API_KEY;\n    }\n    // Enhanced text analysis with multiple AI models\n    async analyzeText(text, language = \"auto\") {\n        try {\n            // Detect language if not specified\n            const detectedLanguage = language === \"auto\" ? await this.detectLanguage(text) : language;\n            // Run multiple AI analyses in parallel\n            const [sentimentResult, emotionResult, toxicityResult, categoryResult] = await Promise.allSettled([\n                this.analyzeSentiment(text, detectedLanguage),\n                this.analyzeEmotions(text),\n                this.analyzeToxicity(text),\n                this.categorizeText(text)\n            ]);\n            // Extract keywords using advanced NLP\n            const keywords = await this.extractAdvancedKeywords(text, detectedLanguage);\n            // Generate actionable insights\n            const insights = await this.generateActionableInsights(text, detectedLanguage);\n            // Determine urgency level\n            const urgency = this.calculateUrgency(sentimentResult.status === \"fulfilled\" ? sentimentResult.value : null, toxicityResult.status === \"fulfilled\" ? toxicityResult.value : 0);\n            return {\n                sentiment: sentimentResult.status === \"fulfilled\" ? sentimentResult.value.sentiment : \"neutral\",\n                confidence: sentimentResult.status === \"fulfilled\" ? sentimentResult.value.confidence : 0.5,\n                emotions: emotionResult.status === \"fulfilled\" ? emotionResult.value : {},\n                keywords,\n                language: detectedLanguage,\n                toxicity: toxicityResult.status === \"fulfilled\" ? toxicityResult.value : 0,\n                urgency,\n                categories: categoryResult.status === \"fulfilled\" ? categoryResult.value : [],\n                actionableInsights: insights\n            };\n        } catch (error) {\n            console.error(\"Advanced AI analysis failed:\", error);\n            return this.fallbackAnalysis(text, language);\n        }\n    }\n    // Voice analysis with speech-to-text and emotion detection\n    async analyzeVoice(audioBlob) {\n        try {\n            // Convert audio to text using Hugging Face Whisper\n            const transcription = await this.speechToText(audioBlob);\n            // Analyze the transcribed text\n            const textAnalysis = await this.analyzeText(transcription);\n            // Analyze voice tone and emotions from audio\n            const voiceEmotions = await this.analyzeVoiceEmotions(audioBlob);\n            return {\n                transcription,\n                sentiment: textAnalysis.sentiment,\n                confidence: textAnalysis.confidence,\n                emotions: {\n                    ...textAnalysis.emotions,\n                    ...voiceEmotions\n                },\n                speakerTone: this.determineSpeakerTone(voiceEmotions),\n                language: textAnalysis.language\n            };\n        } catch (error) {\n            console.error(\"Voice analysis failed:\", error);\n            throw new Error(\"Voice analysis service unavailable\");\n        }\n    }\n    // Image analysis for visual feedback\n    async analyzeImage(imageBlob) {\n        try {\n            // Convert image to base64\n            const base64Image = await this.blobToBase64(imageBlob);\n            // Analyze image content using Hugging Face Vision models\n            const [description, objects, sentiment] = await Promise.all([\n                this.generateImageDescription(base64Image),\n                this.detectObjects(base64Image),\n                this.analyzeImageSentiment(base64Image)\n            ]);\n            // Assess image quality\n            const quality = await this.assessImageQuality(base64Image);\n            // Detect potential issues\n            const issues = await this.detectImageIssues(base64Image, objects);\n            return {\n                description,\n                objects,\n                sentiment,\n                quality,\n                issues,\n                location: await this.extractLocationFromImage(base64Image)\n            };\n        } catch (error) {\n            console.error(\"Image analysis failed:\", error);\n            throw new Error(\"Image analysis service unavailable\");\n        }\n    }\n    // Language detection using AI\n    async detectLanguage(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/fasttext-language-identification\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result[0]?.label?.replace(\"__label__\", \"\") || \"en\";\n            }\n        } catch (error) {\n            console.error(\"Language detection failed:\", error);\n        }\n        return \"en\";\n    }\n    // Enhanced sentiment analysis with multiple models\n    async analyzeSentiment(text, language) {\n        const models = [\n            \"cardiffnlp/twitter-roberta-base-sentiment-latest\",\n            \"nlptown/bert-base-multilingual-uncased-sentiment\"\n        ];\n        for (const model of models){\n            try {\n                const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {\n                    headers: {\n                        \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                        \"Content-Type\": \"application/json\"\n                    },\n                    method: \"POST\",\n                    body: JSON.stringify({\n                        inputs: text\n                    })\n                });\n                if (response.ok) {\n                    const result = await response.json();\n                    if (Array.isArray(result) && result.length > 0) {\n                        const topResult = result[0];\n                        return {\n                            sentiment: this.normalizeSentiment(topResult.label),\n                            confidence: topResult.score\n                        };\n                    }\n                }\n            } catch (error) {\n                console.error(`Sentiment analysis with ${model} failed:`, error);\n            }\n        }\n        throw new Error(\"All sentiment analysis models failed\");\n    }\n    // Advanced emotion analysis\n    async analyzeEmotions(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/j-hartmann/emotion-english-distilroberta-base\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const emotions = await response.json();\n                if (Array.isArray(emotions) && emotions.length > 0) {\n                    const emotionScores = {};\n                    emotions[0].forEach((emotion)=>{\n                        emotionScores[emotion.label.toLowerCase()] = emotion.score;\n                    });\n                    return emotionScores;\n                }\n            }\n        } catch (error) {\n            console.error(\"Emotion analysis failed:\", error);\n        }\n        return {};\n    }\n    // Toxicity detection\n    async analyzeToxicity(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/unitary/toxic-bert\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                if (Array.isArray(result) && result.length > 0) {\n                    const toxicResult = result[0].find((r)=>r.label === \"TOXIC\");\n                    return toxicResult ? toxicResult.score : 0;\n                }\n            }\n        } catch (error) {\n            console.error(\"Toxicity analysis failed:\", error);\n        }\n        return 0;\n    }\n    // Text categorization\n    async categorizeText(text) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/bart-large-mnli\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text,\n                    parameters: {\n                        candidate_labels: [\n                            \"accommodation\",\n                            \"food\",\n                            \"transportation\",\n                            \"attractions\",\n                            \"service quality\",\n                            \"cleanliness\",\n                            \"safety\",\n                            \"pricing\",\n                            \"accessibility\",\n                            \"cultural experience\"\n                        ]\n                    }\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.labels?.slice(0, 3) || [];\n            }\n        } catch (error) {\n            console.error(\"Text categorization failed:\", error);\n        }\n        return [];\n    }\n    // Advanced keyword extraction using TF-IDF and NER\n    async extractAdvancedKeywords(text, language) {\n        try {\n            // Named Entity Recognition\n            const response = await fetch(\"https://api-inference.huggingface.co/models/dbmdz/bert-large-cased-finetuned-conll03-english\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: text\n                })\n            });\n            const entities = [];\n            if (response.ok) {\n                const result = await response.json();\n                if (Array.isArray(result)) {\n                    result.forEach((entity)=>{\n                        if (entity.entity_group && entity.word) {\n                            entities.push(entity.word.replace(\"##\", \"\"));\n                        }\n                    });\n                }\n            }\n            // Combine with TF-IDF keywords\n            const tfidfKeywords = this.extractTFIDFKeywords(text);\n            return [\n                ...new Set([\n                    ...entities,\n                    ...tfidfKeywords\n                ])\n            ].slice(0, 10);\n        } catch (error) {\n            console.error(\"Advanced keyword extraction failed:\", error);\n            return this.extractTFIDFKeywords(text);\n        }\n    }\n    // Generate actionable insights using AI\n    async generateActionableInsights(text, language) {\n        const insights = [];\n        // Rule-based insights for now (can be enhanced with GPT-4 later)\n        const lowercaseText = text.toLowerCase();\n        if (lowercaseText.includes(\"dirty\") || lowercaseText.includes(\"unclean\")) {\n            insights.push(\"Immediate cleaning and hygiene improvement required\");\n        }\n        if (lowercaseText.includes(\"expensive\") || lowercaseText.includes(\"overpriced\")) {\n            insights.push(\"Review pricing strategy and provide value justification\");\n        }\n        if (lowercaseText.includes(\"rude\") || lowercaseText.includes(\"unprofessional\")) {\n            insights.push(\"Staff training and customer service improvement needed\");\n        }\n        if (lowercaseText.includes(\"unsafe\") || lowercaseText.includes(\"dangerous\")) {\n            insights.push(\"URGENT: Safety assessment and security measures required\");\n        }\n        if (lowercaseText.includes(\"beautiful\") || lowercaseText.includes(\"amazing\")) {\n            insights.push(\"Leverage positive aspects in marketing and promotion\");\n        }\n        return insights;\n    }\n    // Calculate urgency level\n    calculateUrgency(sentiment, toxicity) {\n        if (toxicity > 0.8 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.9) {\n            return \"critical\";\n        }\n        if (toxicity > 0.6 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.7) {\n            return \"high\";\n        }\n        if (toxicity > 0.3 || sentiment?.sentiment === \"negative\" && sentiment?.confidence > 0.5) {\n            return \"medium\";\n        }\n        return \"low\";\n    }\n    // Speech to text conversion\n    async speechToText(audioBlob) {\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", audioBlob, \"audio.wav\");\n            const response = await fetch(\"https://api-inference.huggingface.co/models/openai/whisper-large-v3\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`\n                },\n                method: \"POST\",\n                body: formData\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.text || \"\";\n            }\n        } catch (error) {\n            console.error(\"Speech to text failed:\", error);\n        }\n        return \"\";\n    }\n    // Voice emotion analysis\n    async analyzeVoiceEmotions(audioBlob) {\n        // Placeholder for voice emotion analysis\n        // In production, this would use specialized audio emotion recognition models\n        return {\n            calm: 0.3,\n            excited: 0.2,\n            frustrated: 0.1,\n            happy: 0.4\n        };\n    }\n    // Determine speaker tone from voice emotions\n    determineSpeakerTone(emotions) {\n        const maxEmotion = Object.entries(emotions).reduce((a, b)=>a[1] > b[1] ? a : b);\n        return maxEmotion[0] || \"calm\";\n    }\n    // Image description generation\n    async generateImageDescription(base64Image) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/Salesforce/blip-image-captioning-large\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: base64Image\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result[0]?.generated_text || \"Unable to generate description\";\n            }\n        } catch (error) {\n            console.error(\"Image description failed:\", error);\n        }\n        return \"Image analysis unavailable\";\n    }\n    // Object detection in images\n    async detectObjects(base64Image) {\n        try {\n            const response = await fetch(\"https://api-inference.huggingface.co/models/facebook/detr-resnet-50\", {\n                headers: {\n                    \"Authorization\": `Bearer ${this.huggingFaceKey}`,\n                    \"Content-Type\": \"application/json\"\n                },\n                method: \"POST\",\n                body: JSON.stringify({\n                    inputs: base64Image\n                })\n            });\n            if (response.ok) {\n                const result = await response.json();\n                return result.map((obj)=>obj.label).slice(0, 10);\n            }\n        } catch (error) {\n            console.error(\"Object detection failed:\", error);\n        }\n        return [];\n    }\n    // Image sentiment analysis\n    async analyzeImageSentiment(base64Image) {\n        // Placeholder - would use specialized image sentiment models\n        return \"neutral\";\n    }\n    // Assess image quality\n    async assessImageQuality(base64Image) {\n        // Placeholder - would use image quality assessment models\n        return Math.random() * 0.3 + 0.7 // Random quality between 0.7-1.0\n        ;\n    }\n    // Detect issues in images\n    async detectImageIssues(base64Image, objects) {\n        const issues = [];\n        // Rule-based issue detection\n        if (objects.includes(\"trash\") || objects.includes(\"garbage\")) {\n            issues.push(\"Cleanliness issue detected\");\n        }\n        if (objects.includes(\"damage\") || objects.includes(\"broken\")) {\n            issues.push(\"Infrastructure damage detected\");\n        }\n        return issues;\n    }\n    // Extract location from image metadata\n    async extractLocationFromImage(base64Image) {\n        // Placeholder - would extract GPS data from EXIF or use image recognition\n        return undefined;\n    }\n    // Utility functions\n    async blobToBase64(blob) {\n        return new Promise((resolve, reject)=>{\n            const reader = new FileReader();\n            reader.onloadend = ()=>resolve(reader.result);\n            reader.onerror = reject;\n            reader.readAsDataURL(blob);\n        });\n    }\n    normalizeSentiment(label) {\n        const normalized = label.toLowerCase();\n        if (normalized.includes(\"positive\") || normalized.includes(\"pos\")) return \"positive\";\n        if (normalized.includes(\"negative\") || normalized.includes(\"neg\")) return \"negative\";\n        return \"neutral\";\n    }\n    extractTFIDFKeywords(text) {\n        const stopWords = new Set([\n            \"the\",\n            \"a\",\n            \"an\",\n            \"and\",\n            \"or\",\n            \"but\",\n            \"in\",\n            \"on\",\n            \"at\",\n            \"to\",\n            \"for\",\n            \"of\",\n            \"with\",\n            \"by\",\n            \"is\",\n            \"was\",\n            \"are\",\n            \"were\",\n            \"be\",\n            \"been\",\n            \"have\",\n            \"has\",\n            \"had\",\n            \"do\",\n            \"does\",\n            \"did\",\n            \"will\",\n            \"would\",\n            \"could\",\n            \"should\",\n            \"may\",\n            \"might\",\n            \"must\",\n            \"can\",\n            \"this\",\n            \"that\",\n            \"these\",\n            \"those\",\n            \"i\",\n            \"you\",\n            \"he\",\n            \"she\",\n            \"it\",\n            \"we\",\n            \"they\",\n            \"me\",\n            \"him\",\n            \"her\",\n            \"us\",\n            \"them\"\n        ]);\n        const words = text.toLowerCase().replace(/[^\\w\\s]/g, \"\").split(/\\s+/).filter((word)=>word.length > 2 && !stopWords.has(word));\n        const wordCount = {};\n        words.forEach((word)=>{\n            wordCount[word] = (wordCount[word] || 0) + 1;\n        });\n        return Object.entries(wordCount).sort(([, a], [, b])=>b - a).slice(0, 5).map(([word])=>word);\n    }\n    fallbackAnalysis(text, language) {\n        // Simple rule-based fallback\n        const positiveWords = [\n            \"good\",\n            \"great\",\n            \"excellent\",\n            \"amazing\",\n            \"wonderful\",\n            \"beautiful\",\n            \"love\",\n            \"perfect\"\n        ];\n        const negativeWords = [\n            \"bad\",\n            \"terrible\",\n            \"awful\",\n            \"horrible\",\n            \"hate\",\n            \"worst\",\n            \"disappointing\",\n            \"poor\"\n        ];\n        const words = text.toLowerCase().split(/\\s+/);\n        const positiveCount = words.filter((word)=>positiveWords.includes(word)).length;\n        const negativeCount = words.filter((word)=>negativeWords.includes(word)).length;\n        let sentiment = \"neutral\";\n        let confidence = 0.5;\n        if (positiveCount > negativeCount) {\n            sentiment = \"positive\";\n            confidence = Math.min(0.8, 0.5 + (positiveCount - negativeCount) * 0.1);\n        } else if (negativeCount > positiveCount) {\n            sentiment = \"negative\";\n            confidence = Math.min(0.8, 0.5 + (negativeCount - positiveCount) * 0.1);\n        }\n        return {\n            sentiment,\n            confidence,\n            emotions: {\n                joy: sentiment === \"positive\" ? confidence * 0.8 : 0.1,\n                anger: sentiment === \"negative\" ? confidence * 0.6 : 0.1,\n                sadness: sentiment === \"negative\" ? confidence * 0.4 : 0.1\n            },\n            keywords: this.extractTFIDFKeywords(text),\n            language: language || \"en\",\n            toxicity: 0,\n            urgency: \"low\",\n            categories: [],\n            actionableInsights: []\n        };\n    }\n}\n// Singleton instance\nconst aiService = new AdvancedAIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/ai-services.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Ffeedback%2Froute&page=%2Fapi%2Ffeedback%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Ffeedback%2Froute.ts&appDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Cpriya%5COneDrive%5CDesktop%5CSIH%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();