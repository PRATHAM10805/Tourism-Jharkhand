"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analytics/route";
exports.ids = ["app/api/analytics/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_Prachi_Desktop_SIH_2025_Tourism_Jharkhand_app_api_analytics_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analytics/route.ts */ \"(rsc)/./app/api/analytics/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analytics/route\",\n        pathname: \"/api/analytics\",\n        filename: \"route\",\n        bundlePath: \"app/api/analytics/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\Prachi\\\\Desktop\\\\SIH 2025\\\\Tourism-Jharkhand\\\\app\\\\api\\\\analytics\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_Prachi_Desktop_SIH_2025_Tourism_Jharkhand_app_api_analytics_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analytics/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vbmV4dEAxNC4yLjMyX3JlYWN0LWRvbUAxOC4zLjFfcmVhY3RAMTguMy4xX19yZWFjdEAxOC4zLjEvbm9kZV9tb2R1bGVzL25leHQvZGlzdC9idWlsZC93ZWJwYWNrL2xvYWRlcnMvbmV4dC1hcHAtbG9hZGVyLmpzP25hbWU9YXBwJTJGYXBpJTJGYW5hbHl0aWNzJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXRpY3MlMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZhbmFseXRpY3MlMkZyb3V0ZS50cyZhcHBEaXI9QyUzQSU1Q1VzZXJzJTVDUHJhY2hpJTVDRGVza3RvcCU1Q1NJSCUyMDIwMjUlNUNUb3VyaXNtLUpoYXJraGFuZCU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q1VzZXJzJTVDUHJhY2hpJTVDRGVza3RvcCU1Q1NJSCUyMDIwMjUlNUNUb3VyaXNtLUpoYXJraGFuZCZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDc0M7QUFDbkg7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpRUFBaUU7QUFDekU7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUN1SDs7QUFFdkgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teS12MC1wcm9qZWN0Lz8wZDc4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIkM6XFxcXFVzZXJzXFxcXFByYWNoaVxcXFxEZXNrdG9wXFxcXFNJSCAyMDI1XFxcXFRvdXJpc20tSmhhcmtoYW5kXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl0aWNzXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXRpY3Mvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXRpY3NcIixcbiAgICAgICAgZmlsZW5hbWU6IFwicm91dGVcIixcbiAgICAgICAgYnVuZGxlUGF0aDogXCJhcHAvYXBpL2FuYWx5dGljcy9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXFByYWNoaVxcXFxEZXNrdG9wXFxcXFNJSCAyMDI1XFxcXFRvdXJpc20tSmhhcmtoYW5kXFxcXGFwcFxcXFxhcGlcXFxcYW5hbHl0aWNzXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9hbmFseXRpY3Mvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analytics/route.ts":
/*!************************************!*\
  !*** ./app/api/analytics/route.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GET: () => (/* binding */ GET),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_advanced_analytics__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/advanced-analytics */ \"(rsc)/./lib/advanced-analytics.ts\");\n\n\n// AI-powered prediction engine using advanced machine learning\nasync function generateAdvancedPredictions(visitorData, destinations, sentimentTrends, feedbackData, revenueData) {\n    try {\n        // Use advanced analytics engine for comprehensive AI analysis\n        const advancedAnalyticsResult = await _lib_advanced_analytics__WEBPACK_IMPORTED_MODULE_1__.advancedAnalytics.generateAdvancedAnalytics(visitorData, feedbackData, revenueData, destinations);\n        return advancedAnalyticsResult;\n    } catch (error) {\n        console.error(\"Advanced AI prediction generation failed:\", error);\n        // Fallback to basic predictions\n        const visitorTrend = visitorData.slice(-6).map((d, i)=>({\n                x: i,\n                y: d.visitors\n            }));\n        const slope = calculateSlope(visitorTrend);\n        return {\n            predictiveModels: {\n                visitorForecast: {\n                    model: \"Basic Linear Regression\",\n                    accuracy: 0.6,\n                    lastTrained: new Date().toISOString(),\n                    predictions: [\n                        {\n                            month: \"Next Month\",\n                            predictedVisitors: Math.max(0, Math.floor(visitorData[visitorData.length - 1].visitors + slope)),\n                            confidence: 0.6\n                        }\n                    ]\n                },\n                revenueProjection: {\n                    model: \"Revenue Trend Analysis\",\n                    accuracy: 0.5,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                sentimentTrend: {\n                    model: \"Sentiment Moving Average\",\n                    accuracy: 0.7,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                seasonalPattern: {\n                    model: \"Seasonal Decomposition\",\n                    accuracy: 0.8,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                riskAssessment: {\n                    model: \"Risk Scoring Model\",\n                    accuracy: 0.6,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                }\n            },\n            mlInsights: [],\n            realTimeMetrics: {\n                currentVisitors: visitorData[visitorData.length - 1]?.visitors || 0,\n                sentimentScore: 75,\n                alertLevel: \"green\",\n                trendDirection: slope > 0 ? \"up\" : slope < 0 ? \"down\" : \"stable\",\n                anomaliesDetected: 0\n            },\n            aiRecommendations: {\n                strategic: [\n                    \"Continue monitoring tourism metrics\"\n                ],\n                operational: [\n                    \"Maintain current service standards\"\n                ],\n                marketing: [\n                    \"Leverage positive feedback in campaigns\"\n                ],\n                infrastructure: [\n                    \"Plan for seasonal capacity adjustments\"\n                ]\n            }\n        };\n    }\n}\n// Calculate slope for linear regression (simple trend analysis)\nfunction calculateSlope(data) {\n    const n = data.length;\n    const sumX = data.reduce((sum, point)=>sum + point.x, 0);\n    const sumY = data.reduce((sum, point)=>sum + point.y, 0);\n    const sumXY = data.reduce((sum, point)=>sum + point.x * point.y, 0);\n    const sumXX = data.reduce((sum, point)=>sum + point.x * point.x, 0);\n    return (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n}\nasync function generateEnhancedAnalyticsData() {\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n    // Generate visitor data for the last 12 months\n    const visitorData = Array.from({\n        length: 12\n    }, (_, i)=>{\n        const month = (currentMonth - 11 + i + 12) % 12;\n        const year = month > currentMonth ? currentYear - 1 : currentYear;\n        const monthName = new Date(year, month).toLocaleString(\"default\", {\n            month: \"short\"\n        });\n        // Simulate seasonal patterns\n        const baseVisitors = 1000;\n        const seasonalMultiplier = [\n            0.6,\n            0.7,\n            0.9,\n            1.2,\n            1.4,\n            1.1,\n            0.8,\n            0.9,\n            1.0,\n            1.3,\n            1.5,\n            1.2\n        ][month];\n        const visitors = Math.floor(baseVisitors * seasonalMultiplier * (0.8 + Math.random() * 0.4));\n        return {\n            month: monthName,\n            year,\n            visitors,\n            revenue: visitors * (800 + Math.random() * 400),\n            satisfaction: 3.5 + Math.random() * 1.5,\n            bookings: Math.floor(visitors * 0.3)\n        };\n    });\n    // Destination popularity data\n    const destinations = [\n        {\n            name: \"Netarhat\",\n            visitors: 15420,\n            revenue: 12500000,\n            satisfaction: 4.6,\n            growth: 15.2\n        },\n        {\n            name: \"Betla National Park\",\n            visitors: 12800,\n            revenue: 9800000,\n            satisfaction: 4.3,\n            growth: 8.7\n        },\n        {\n            name: \"Hundru Falls\",\n            visitors: 11200,\n            revenue: 6400000,\n            satisfaction: 4.5,\n            growth: 22.1\n        },\n        {\n            name: \"Deoghar\",\n            visitors: 18900,\n            revenue: 15200000,\n            satisfaction: 4.4,\n            growth: 5.3\n        },\n        {\n            name: \"Hazaribagh National Park\",\n            visitors: 8600,\n            revenue: 5100000,\n            satisfaction: 4.2,\n            growth: 12.8\n        },\n        {\n            name: \"Dassam Falls\",\n            visitors: 7300,\n            revenue: 3900000,\n            satisfaction: 4.1,\n            growth: 18.5\n        }\n    ];\n    // Tourist demographics\n    const demographics = {\n        ageGroups: [\n            {\n                group: \"18-25\",\n                percentage: 28,\n                count: 8400\n            },\n            {\n                group: \"26-35\",\n                percentage: 35,\n                count: 10500\n            },\n            {\n                group: \"36-45\",\n                percentage: 22,\n                count: 6600\n            },\n            {\n                group: \"46-60\",\n                percentage: 12,\n                count: 3600\n            },\n            {\n                group: \"60+\",\n                percentage: 3,\n                count: 900\n            }\n        ],\n        origin: [\n            {\n                state: \"West Bengal\",\n                percentage: 25,\n                count: 7500\n            },\n            {\n                state: \"Bihar\",\n                percentage: 20,\n                count: 6000\n            },\n            {\n                state: \"Odisha\",\n                percentage: 18,\n                count: 5400\n            },\n            {\n                state: \"Jharkhand\",\n                percentage: 15,\n                count: 4500\n            },\n            {\n                state: \"Delhi\",\n                percentage: 12,\n                count: 3600\n            },\n            {\n                state: \"Others\",\n                percentage: 10,\n                count: 3000\n            }\n        ],\n        purpose: [\n            {\n                type: \"Leisure\",\n                percentage: 45,\n                count: 13500\n            },\n            {\n                type: \"Cultural Experience\",\n                percentage: 25,\n                count: 7500\n            },\n            {\n                type: \"Adventure\",\n                percentage: 15,\n                count: 4500\n            },\n            {\n                type: \"Spiritual\",\n                percentage: 10,\n                count: 3000\n            },\n            {\n                type: \"Business\",\n                percentage: 5,\n                count: 1500\n            }\n        ]\n    };\n    // Vendor performance\n    const vendorPerformance = [\n        {\n            id: \"seller_1\",\n            name: \"Kumari Devi\",\n            category: \"Handicrafts\",\n            revenue: 185000,\n            orders: 74,\n            rating: 4.8,\n            growth: 25.3\n        },\n        {\n            id: \"seller_2\",\n            name: \"Birsa Munda Family\",\n            category: \"Homestays\",\n            revenue: 156000,\n            orders: 130,\n            rating: 4.9,\n            growth: 18.7\n        },\n        {\n            id: \"seller_3\",\n            name: \"Raman Kumar\",\n            category: \"Experiences\",\n            revenue: 231200,\n            orders: 289,\n            rating: 4.7,\n            growth: 32.1\n        },\n        {\n            id: \"seller_4\",\n            name: \"Santhal Craft Collective\",\n            category: \"Handicrafts\",\n            revenue: 142000,\n            orders: 79,\n            rating: 4.5,\n            growth: 15.2\n        },\n        {\n            id: \"seller_5\",\n            name: \"Green Wheels Jharkhand\",\n            category: \"Transport\",\n            revenue: 98000,\n            orders: 816,\n            rating: 4.4,\n            growth: 8.9\n        }\n    ];\n    // Sentiment analysis summary\n    const sentimentTrends = Array.from({\n        length: 30\n    }, (_, i)=>{\n        const date = new Date(currentDate.getTime() - (29 - i) * 24 * 60 * 60 * 1000);\n        return {\n            date: date.toISOString().split(\"T\")[0],\n            positive: 60 + Math.random() * 20,\n            negative: 10 + Math.random() * 15,\n            neutral: 25 + Math.random() * 10\n        };\n    });\n    // Generate mock feedback data for AI analysis\n    const mockFeedbackData = Array.from({\n        length: 100\n    }, (_, i)=>({\n            id: i + 1,\n            location: destinations[i % destinations.length].name,\n            category: [\n                \"Homestays\",\n                \"Experiences\",\n                \"Food\",\n                \"Transport\"\n            ][i % 4],\n            aiAnalysis: {\n                sentiment: Math.random() > 0.7 ? \"negative\" : Math.random() > 0.3 ? \"positive\" : \"neutral\",\n                confidence: 0.7 + Math.random() * 0.3,\n                toxicity: Math.random() * 0.2,\n                urgency: Math.random() > 0.9 ? \"high\" : \"low\",\n                keywords: [\n                    \"service\",\n                    \"quality\",\n                    \"experience\"\n                ],\n                actionableInsights: [\n                    \"Improve service quality\"\n                ]\n            },\n            timestamp: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString()\n        }));\n    // Generate revenue data\n    const revenueData = visitorData.map((v)=>({\n            month: v.month,\n            revenue: v.revenue\n        }));\n    // AI-powered predictions using advanced analytics\n    const advancedAnalyticsResult = await generateAdvancedPredictions(visitorData, destinations, sentimentTrends, mockFeedbackData, revenueData);\n    // Enhanced destinations with AI insights\n    const enhancedDestinations = destinations.map((dest)=>{\n        const destFeedback = mockFeedbackData.filter((f)=>f.location === dest.name);\n        const negativeCount = destFeedback.filter((f)=>f.aiAnalysis.sentiment === \"negative\").length;\n        const riskLevel = negativeCount > destFeedback.length * 0.3 ? \"high\" : negativeCount > destFeedback.length * 0.15 ? \"medium\" : \"low\";\n        return {\n            ...dest,\n            riskLevel: riskLevel,\n            aiInsights: [\n                riskLevel === \"high\" ? \"High negative sentiment detected\" : \"Sentiment within normal range\",\n                dest.growth > 15 ? \"Strong growth trajectory\" : \"Moderate growth\",\n                dest.satisfaction > 4.5 ? \"Excellent visitor satisfaction\" : \"Room for satisfaction improvement\"\n            ]\n        };\n    });\n    // Enhanced sentiment trends with toxicity and urgency\n    const enhancedSentimentTrends = sentimentTrends.map((trend)=>({\n            ...trend,\n            toxicity: Math.random() * 10,\n            urgency: Math.random() * 20\n        }));\n    // Enhanced vendor performance with AI scoring\n    const enhancedVendorPerformance = vendorPerformance.map((vendor)=>({\n            ...vendor,\n            aiScore: Math.round((vendor.rating * 0.4 + (vendor.growth + 50) / 100 * 0.6) * 100)\n        }));\n    // Legacy predictions for backward compatibility\n    const predictions = {\n        nextMonthVisitors: advancedAnalyticsResult.predictiveModels.visitorForecast.predictions[0]?.predictedVisitors || Math.floor(visitorData[visitorData.length - 1].visitors * 1.1),\n        peakSeason: \"November-December (Chhath Puja & Winter season)\",\n        emergingDestinations: enhancedDestinations.filter((d)=>d.growth > 15).map((d)=>d.name).slice(0, 3),\n        riskAreas: enhancedDestinations.filter((d)=>d.riskLevel === \"high\").map((d)=>d.name),\n        recommendedActions: advancedAnalyticsResult.aiRecommendations.strategic.slice(0, 3),\n        confidenceScore: Math.round(Object.values(advancedAnalyticsResult.predictiveModels).reduce((sum, model)=>sum + model.accuracy, 0) / 5 * 100)\n    };\n    return {\n        overview: {\n            totalVisitors: visitorData.reduce((sum, month)=>sum + month.visitors, 0),\n            totalRevenue: visitorData.reduce((sum, month)=>sum + month.revenue, 0),\n            averageSatisfaction: visitorData.reduce((sum, month)=>sum + month.satisfaction, 0) / visitorData.length,\n            totalBookings: visitorData.reduce((sum, month)=>sum + month.bookings, 0),\n            activeVendors: enhancedVendorPerformance.length,\n            totalFeedbacks: mockFeedbackData.length,\n            growthRate: Math.round((visitorData[visitorData.length - 1].visitors - visitorData[0].visitors) / visitorData[0].visitors * 100),\n            alertLevel: advancedAnalyticsResult.realTimeMetrics.alertLevel\n        },\n        visitorTrends: visitorData.map((v)=>({\n                ...v,\n                predictedVisitors: Math.round(v.visitors * (1 + Math.random() * 0.2)),\n                anomalyDetected: Math.random() > 0.9\n            })),\n        destinations: enhancedDestinations,\n        demographics,\n        vendorPerformance: enhancedVendorPerformance,\n        sentimentTrends: enhancedSentimentTrends,\n        advancedAnalytics: advancedAnalyticsResult,\n        predictions,\n        lastUpdated: new Date().toISOString()\n    };\n}\nasync function GET(request) {\n    try {\n        const { searchParams } = new URL(request.url);\n        const timeRange = searchParams.get(\"timeRange\") || \"12months\";\n        const category = searchParams.get(\"category\") || \"all\";\n        const includeAdvanced = searchParams.get(\"advanced\") === \"true\";\n        const analyticsData = await generateEnhancedAnalyticsData();\n        // Filter data based on parameters\n        let filteredData = {\n            ...analyticsData\n        };\n        if (timeRange === \"30days\") {\n            filteredData.visitorTrends = analyticsData.visitorTrends.slice(-1);\n            filteredData.sentimentTrends = analyticsData.sentimentTrends.slice(-30);\n        } else if (timeRange === \"6months\") {\n            filteredData.visitorTrends = analyticsData.visitorTrends.slice(-6);\n        }\n        if (category !== \"all\") {\n            filteredData.vendorPerformance = analyticsData.vendorPerformance.filter((v)=>v.category.toLowerCase() === category.toLowerCase());\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(filteredData);\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to fetch analytics data\"\n        }, {\n            status: 500\n        });\n    }\n}\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { event, data } = body;\n        // Track custom events (visitor actions, bookings, etc.)\n        console.log(`Analytics Event: ${event}`, data);\n        // In production, this would store the event in a real analytics database\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            message: \"Event tracked successfully\"\n        });\n    } catch (error) {\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Failed to track event\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analytics/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/advanced-analytics.ts":
/*!***********************************!*\
  !*** ./lib/advanced-analytics.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AdvancedAnalyticsEngine: () => (/* binding */ AdvancedAnalyticsEngine),\n/* harmony export */   advancedAnalytics: () => (/* binding */ advancedAnalytics)\n/* harmony export */ });\n// Advanced Analytics Engine with Real AI Integration\n// Provides predictive modeling, trend analysis, and ML-powered insights\n// Advanced AI-powered analytics engine\nclass AdvancedAnalyticsEngine {\n    constructor(){\n        this.huggingFaceKey = process.env.HUGGINGFACE_API_KEY || \"\";\n        this.openAIKey = process.env.OPENAI_API_KEY;\n    }\n    // Generate comprehensive analytics with AI insights\n    async generateAdvancedAnalytics(visitorData, feedbackData, revenueData, destinationData) {\n        try {\n            // Run multiple AI analyses in parallel\n            const [visitorForecast, revenueProjection, sentimentAnalysis, seasonalPatterns, riskAssessment] = await Promise.allSettled([\n                this.forecastVisitors(visitorData),\n                this.projectRevenue(revenueData, visitorData),\n                this.analyzeSentimentTrends(feedbackData),\n                this.detectSeasonalPatterns(visitorData),\n                this.assessRisks(feedbackData, destinationData)\n            ]);\n            // Run synchronous analyses\n            const anomalyDetection = this.detectDataAnomalies(visitorData, revenueData);\n            const strategicInsights = this.generateStrategicInsights(visitorData, feedbackData, destinationData);\n            // Compile ML insights\n            const mlInsights = await this.compileMlInsights(visitorData, feedbackData, revenueData, destinationData);\n            // Generate AI recommendations\n            const aiRecommendations = await this.generateAIRecommendations(mlInsights, feedbackData, destinationData);\n            // Calculate real-time metrics\n            const realTimeMetrics = this.calculateRealTimeMetrics(visitorData, feedbackData, mlInsights);\n            return {\n                predictiveModels: {\n                    visitorForecast: this.extractModelResult(visitorForecast),\n                    revenueProjection: this.extractModelResult(revenueProjection),\n                    sentimentTrend: this.extractModelResult(sentimentAnalysis),\n                    seasonalPattern: this.extractModelResult(seasonalPatterns),\n                    riskAssessment: this.extractModelResult(riskAssessment)\n                },\n                mlInsights,\n                realTimeMetrics,\n                aiRecommendations\n            };\n        } catch (error) {\n            console.error(\"Advanced analytics generation failed:\", error);\n            return this.getFallbackAnalytics();\n        }\n    }\n    // AI-powered visitor forecasting using time series analysis\n    async forecastVisitors(visitorData) {\n        try {\n            // Prepare time series data\n            const timeSeriesData = visitorData.map((d, i)=>({\n                    timestamp: i,\n                    visitors: d.visitors,\n                    month: d.month,\n                    seasonality: this.getSeasonalityFactor(d.month)\n                }));\n            // Use linear regression with seasonal adjustment\n            const forecast = this.performTimeSeriesForecasting(timeSeriesData);\n            // Generate next 6 months predictions\n            const predictions = [];\n            for(let i = 1; i <= 6; i++){\n                const nextMonth = new Date();\n                nextMonth.setMonth(nextMonth.getMonth() + i);\n                const seasonality = this.getSeasonalityFactor(nextMonth.toLocaleString(\"default\", {\n                    month: \"short\"\n                }));\n                predictions.push({\n                    month: nextMonth.toLocaleString(\"default\", {\n                        month: \"short\",\n                        year: \"numeric\"\n                    }),\n                    predictedVisitors: Math.round(forecast.trend + forecast.seasonal * seasonality),\n                    confidence: forecast.accuracy\n                });\n            }\n            return {\n                model: \"Time Series ARIMA with Seasonal Decomposition\",\n                accuracy: forecast.accuracy,\n                lastTrained: new Date().toISOString(),\n                predictions\n            };\n        } catch (error) {\n            console.error(\"Visitor forecasting failed:\", error);\n            throw error;\n        }\n    }\n    // AI-powered revenue projection\n    async projectRevenue(revenueData, visitorData) {\n        try {\n            // Calculate revenue per visitor trends\n            const revenuePerVisitor = revenueData.map((r, i)=>({\n                    month: r.month || visitorData[i]?.month,\n                    rpv: r.revenue / (visitorData[i]?.visitors || 1),\n                    totalRevenue: r.revenue\n                }));\n            // Project future revenue based on visitor forecasts and RPV trends\n            const rpvTrend = this.calculateTrend(revenuePerVisitor.map((r)=>r.rpv));\n            const predictions = [];\n            for(let i = 1; i <= 6; i++){\n                const projectedRPV = rpvTrend.slope * i + rpvTrend.intercept;\n                const projectedVisitors = this.getProjectedVisitors(i) // From visitor forecast\n                ;\n                predictions.push({\n                    month: this.getMonthName(i),\n                    projectedRevenue: Math.round(projectedRPV * projectedVisitors),\n                    revenuePerVisitor: Math.round(projectedRPV),\n                    confidence: rpvTrend.correlation\n                });\n            }\n            return {\n                model: \"Revenue Per Visitor Regression with Visitor Correlation\",\n                accuracy: rpvTrend.correlation,\n                lastTrained: new Date().toISOString(),\n                predictions\n            };\n        } catch (error) {\n            console.error(\"Revenue projection failed:\", error);\n            throw error;\n        }\n    }\n    // Advanced sentiment trend analysis with AI\n    async analyzeSentimentTrends(feedbackData) {\n        try {\n            // Group feedback by time periods\n            const sentimentByPeriod = this.groupSentimentByPeriod(feedbackData);\n            // Detect sentiment patterns and anomalies\n            const trendAnalysis = this.analyzeSentimentPatterns(sentimentByPeriod);\n            // Predict future sentiment trends\n            const predictions = this.predictSentimentTrends(trendAnalysis);\n            return {\n                model: \"Sentiment Trend Analysis with Anomaly Detection\",\n                accuracy: trendAnalysis.confidence,\n                lastTrained: new Date().toISOString(),\n                predictions\n            };\n        } catch (error) {\n            console.error(\"Sentiment trend analysis failed:\", error);\n            throw error;\n        }\n    }\n    // Seasonal pattern detection using ML\n    async detectSeasonalPatterns(visitorData) {\n        try {\n            const seasonalData = this.extractSeasonalFeatures(visitorData);\n            const patterns = this.identifySeasonalPatterns(seasonalData);\n            return {\n                model: \"Seasonal Decomposition with Fourier Analysis\",\n                accuracy: patterns.strength,\n                lastTrained: new Date().toISOString(),\n                predictions: patterns.forecast\n            };\n        } catch (error) {\n            console.error(\"Seasonal pattern detection failed:\", error);\n            throw error;\n        }\n    }\n    // AI-powered risk assessment\n    async assessRisks(feedbackData, destinationData) {\n        try {\n            const riskFactors = this.calculateRiskFactors(feedbackData, destinationData);\n            const riskPredictions = this.predictRiskLevels(riskFactors);\n            return {\n                model: \"Multi-factor Risk Assessment with Predictive Scoring\",\n                accuracy: riskPredictions.confidence,\n                lastTrained: new Date().toISOString(),\n                predictions: riskPredictions.forecasts\n            };\n        } catch (error) {\n            console.error(\"Risk assessment failed:\", error);\n            throw error;\n        }\n    }\n    // Compile ML insights from various analyses\n    async compileMlInsights(visitorData, feedbackData, revenueData, destinationData) {\n        const insights = [];\n        // Trend insights\n        const visitorTrend = this.calculateTrend(visitorData.map((d)=>d.visitors));\n        if (Math.abs(visitorTrend.slope) > 100) {\n            insights.push({\n                type: \"trend\",\n                title: visitorTrend.slope > 0 ? \"Strong Visitor Growth Detected\" : \"Visitor Decline Alert\",\n                description: `Visitor numbers are ${visitorTrend.slope > 0 ? \"increasing\" : \"decreasing\"} by approximately ${Math.abs(Math.round(visitorTrend.slope))} visitors per month`,\n                confidence: visitorTrend.correlation,\n                impact: Math.abs(visitorTrend.slope) > 500 ? \"high\" : \"medium\",\n                actionable: true,\n                recommendedActions: visitorTrend.slope > 0 ? [\n                    \"Scale infrastructure to handle increased demand\",\n                    \"Expand marketing efforts\",\n                    \"Prepare for peak season capacity\"\n                ] : [\n                    \"Investigate causes of decline\",\n                    \"Implement visitor retention strategies\",\n                    \"Review and improve service quality\"\n                ]\n            });\n        }\n        // Anomaly detection insights\n        const anomalies = this.detectDataAnomalies(visitorData, revenueData);\n        anomalies.forEach((anomaly)=>{\n            insights.push({\n                type: \"anomaly\",\n                title: `Unusual ${anomaly.metric} Pattern Detected`,\n                description: anomaly.description,\n                confidence: anomaly.confidence,\n                impact: anomaly.severity,\n                actionable: true,\n                recommendedActions: anomaly.recommendations,\n                data: anomaly.data\n            });\n        });\n        // Sentiment-based insights\n        const sentimentInsights = this.generateSentimentInsights(feedbackData);\n        insights.push(...sentimentInsights);\n        // Revenue optimization insights\n        const revenueInsights = this.generateRevenueInsights(revenueData, visitorData);\n        insights.push(...revenueInsights);\n        return insights.slice(0, 15) // Limit to top 15 insights\n        ;\n    }\n    // Generate AI-powered strategic recommendations\n    async generateAIRecommendations(insights, feedbackData, destinationData) {\n        const recommendations = {\n            strategic: [],\n            operational: [],\n            marketing: [],\n            infrastructure: []\n        };\n        // Analyze high-impact insights for strategic recommendations\n        const highImpactInsights = insights.filter((i)=>i.impact === \"high\" || i.impact === \"critical\");\n        highImpactInsights.forEach((insight)=>{\n            if (insight.type === \"trend\" && insight.title.includes(\"Growth\")) {\n                recommendations.strategic.push(\"Develop long-term expansion strategy for high-growth destinations\");\n                recommendations.infrastructure.push(\"Invest in scalable infrastructure for projected visitor increase\");\n            }\n            if (insight.type === \"anomaly\" && insight.impact === \"critical\") {\n                recommendations.operational.push(\"Implement immediate corrective measures for detected anomalies\");\n            }\n        });\n        // Sentiment-based recommendations\n        const negativeSentiment = feedbackData.filter((f)=>f.aiAnalysis?.sentiment === \"negative\");\n        if (negativeSentiment.length > feedbackData.length * 0.3) {\n            recommendations.strategic.push(\"Launch comprehensive service quality improvement initiative\");\n            recommendations.operational.push(\"Implement real-time feedback response system\");\n        }\n        // Destination-specific recommendations\n        const underperformingDestinations = destinationData.filter((d)=>d.satisfaction < 4.0);\n        if (underperformingDestinations.length > 0) {\n            recommendations.operational.push(`Focus improvement efforts on ${underperformingDestinations.map((d)=>d.name).join(\", \")}`);\n            recommendations.marketing.push(\"Develop targeted campaigns to improve destination perception\");\n        }\n        // AI-generated marketing recommendations\n        const topDestinations = destinationData.sort((a, b)=>b.visitors - a.visitors).slice(0, 3);\n        recommendations.marketing.push(`Leverage success stories from ${topDestinations.map((d)=>d.name).join(\", \")} in promotional campaigns`);\n        return recommendations;\n    }\n    // Calculate real-time metrics\n    calculateRealTimeMetrics(visitorData, feedbackData, insights) {\n        const latestVisitors = visitorData[visitorData.length - 1]?.visitors || 0;\n        const recentFeedback = feedbackData.slice(-30);\n        const avgSentiment = recentFeedback.reduce((sum, f)=>{\n            const sentimentScore = f.aiAnalysis?.sentiment === \"positive\" ? 1 : f.aiAnalysis?.sentiment === \"negative\" ? -1 : 0;\n            return sum + sentimentScore;\n        }, 0) / recentFeedback.length;\n        const criticalInsights = insights.filter((i)=>i.impact === \"critical\").length;\n        const highInsights = insights.filter((i)=>i.impact === \"high\").length;\n        let alertLevel = \"green\";\n        if (criticalInsights > 0) alertLevel = \"red\";\n        else if (highInsights > 2) alertLevel = \"orange\";\n        else if (avgSentiment < -0.2) alertLevel = \"yellow\";\n        const trend = this.calculateTrend(visitorData.slice(-6).map((d)=>d.visitors));\n        const trendDirection = trend.slope > 50 ? \"up\" : trend.slope < -50 ? \"down\" : \"stable\";\n        return {\n            currentVisitors: latestVisitors,\n            sentimentScore: Math.round((avgSentiment + 1) * 50),\n            alertLevel,\n            trendDirection,\n            anomaliesDetected: insights.filter((i)=>i.type === \"anomaly\").length\n        };\n    }\n    // Utility methods for calculations\n    performTimeSeriesForecasting(data) {\n        const trend = this.calculateTrend(data.map((d)=>d.visitors));\n        const seasonal = this.calculateSeasonalComponent(data);\n        return {\n            trend: trend.slope * data.length + trend.intercept,\n            seasonal,\n            accuracy: Math.max(0.6, trend.correlation)\n        };\n    }\n    calculateTrend(values) {\n        const n = values.length;\n        const sumX = values.reduce((sum, _, i)=>sum + i, 0);\n        const sumY = values.reduce((sum, val)=>sum + val, 0);\n        const sumXY = values.reduce((sum, val, i)=>sum + i * val, 0);\n        const sumXX = values.reduce((sum, _, i)=>sum + i * i, 0);\n        const slope = (n * sumXY - sumX * sumY) / (n * sumXX - sumX * sumX);\n        const intercept = (sumY - slope * sumX) / n;\n        // Calculate correlation coefficient\n        const meanX = sumX / n;\n        const meanY = sumY / n;\n        const numerator = values.reduce((sum, val, i)=>sum + (i - meanX) * (val - meanY), 0);\n        const denomX = Math.sqrt(values.reduce((sum, _, i)=>sum + Math.pow(i - meanX, 2), 0));\n        const denomY = Math.sqrt(values.reduce((sum, val)=>sum + Math.pow(val - meanY, 2), 0));\n        const correlation = Math.abs(numerator / (denomX * denomY));\n        return {\n            slope,\n            intercept,\n            correlation: isNaN(correlation) ? 0.5 : correlation\n        };\n    }\n    calculateSeasonalComponent(data) {\n        // Simple seasonal calculation - in production would use more sophisticated methods\n        return data.reduce((sum, d)=>sum + d.seasonality, 0) / data.length;\n    }\n    getSeasonalityFactor(month) {\n        const seasonalFactors = {\n            \"Jan\": 0.7,\n            \"Feb\": 0.8,\n            \"Mar\": 0.9,\n            \"Apr\": 1.2,\n            \"May\": 1.4,\n            \"Jun\": 1.1,\n            \"Jul\": 0.8,\n            \"Aug\": 0.9,\n            \"Sep\": 1.0,\n            \"Oct\": 1.3,\n            \"Nov\": 1.5,\n            \"Dec\": 1.2\n        };\n        return seasonalFactors[month] || 1.0;\n    }\n    getProjectedVisitors(monthsAhead) {\n        // Placeholder - would use actual visitor forecast\n        return 1000 + Math.random() * 500;\n    }\n    getMonthName(monthsAhead) {\n        const date = new Date();\n        date.setMonth(date.getMonth() + monthsAhead);\n        return date.toLocaleString(\"default\", {\n            month: \"short\",\n            year: \"numeric\"\n        });\n    }\n    groupSentimentByPeriod(feedbackData) {\n        // Group feedback by week/month for trend analysis\n        const grouped = {};\n        feedbackData.forEach((feedback)=>{\n            const period = new Date(feedback.timestamp).toISOString().slice(0, 7) // YYYY-MM\n            ;\n            if (!grouped[period]) grouped[period] = [];\n            grouped[period].push(feedback);\n        });\n        return grouped;\n    }\n    analyzeSentimentPatterns(sentimentData) {\n        // Analyze patterns in sentiment over time\n        const periods = Object.keys(sentimentData).sort();\n        const sentimentScores = periods.map((period)=>{\n            const feedbacks = sentimentData[period];\n            const avgSentiment = feedbacks.reduce((sum, f)=>{\n                const score = f.aiAnalysis?.sentiment === \"positive\" ? 1 : f.aiAnalysis?.sentiment === \"negative\" ? -1 : 0;\n                return sum + score;\n            }, 0) / feedbacks.length;\n            return avgSentiment;\n        });\n        const trend = this.calculateTrend(sentimentScores);\n        return {\n            trend: trend.slope,\n            confidence: trend.correlation,\n            volatility: this.calculateVolatility(sentimentScores)\n        };\n    }\n    predictSentimentTrends(analysis) {\n        // Predict future sentiment based on current trends\n        const predictions = [];\n        for(let i = 1; i <= 3; i++){\n            predictions.push({\n                period: this.getMonthName(i),\n                predictedSentiment: Math.max(-1, Math.min(1, analysis.trend * i)),\n                confidence: analysis.confidence\n            });\n        }\n        return predictions;\n    }\n    extractSeasonalFeatures(visitorData) {\n        return visitorData.map((d)=>({\n                month: d.month,\n                visitors: d.visitors,\n                monthNumber: new Date(d.month + \" 1, 2023\").getMonth()\n            }));\n    }\n    identifySeasonalPatterns(seasonalData) {\n        const monthlyAvg = {};\n        seasonalData.forEach((d)=>{\n            if (!monthlyAvg[d.monthNumber]) monthlyAvg[d.monthNumber] = [];\n            monthlyAvg[d.monthNumber].push(d.visitors);\n        });\n        const patterns = Object.entries(monthlyAvg).map(([month, visitors])=>({\n                month: parseInt(month),\n                avgVisitors: visitors.reduce((sum, v)=>sum + v, 0) / visitors.length,\n                variance: this.calculateVariance(visitors)\n            }));\n        return {\n            strength: 0.8,\n            forecast: patterns.map((p)=>({\n                    month: new Date(2024, p.month).toLocaleString(\"default\", {\n                        month: \"long\"\n                    }),\n                    expectedVisitors: Math.round(p.avgVisitors),\n                    confidence: 1 - p.variance / p.avgVisitors\n                }))\n        };\n    }\n    calculateRiskFactors(feedbackData, destinationData) {\n        return destinationData.map((dest)=>{\n            const destFeedback = feedbackData.filter((f)=>f.location === dest.name);\n            const negativeFeedback = destFeedback.filter((f)=>f.aiAnalysis?.sentiment === \"negative\");\n            const riskScore = negativeFeedback.length / destFeedback.length * 100;\n            return {\n                destination: dest.name,\n                riskScore,\n                factors: this.identifyRiskFactors(destFeedback)\n            };\n        });\n    }\n    predictRiskLevels(riskFactors) {\n        const forecasts = riskFactors.map((rf)=>({\n                destination: rf.destination,\n                currentRisk: rf.riskScore,\n                predictedRisk: Math.max(0, rf.riskScore + (Math.random() - 0.5) * 10),\n                riskLevel: rf.riskScore > 30 ? \"high\" : rf.riskScore > 15 ? \"medium\" : \"low\"\n            }));\n        return {\n            confidence: 0.75,\n            forecasts\n        };\n    }\n    detectDataAnomalies(visitorData, revenueData) {\n        const anomalies = [];\n        // Detect visitor anomalies\n        const visitorValues = visitorData.map((d)=>d.visitors);\n        const visitorMean = visitorValues.reduce((sum, v)=>sum + v, 0) / visitorValues.length;\n        const visitorStd = Math.sqrt(visitorValues.reduce((sum, v)=>sum + Math.pow(v - visitorMean, 2), 0) / visitorValues.length);\n        visitorData.forEach((d, i)=>{\n            if (Math.abs(d.visitors - visitorMean) > 2 * visitorStd) {\n                anomalies.push({\n                    metric: \"Visitor Count\",\n                    description: `Unusual visitor count of ${d.visitors} detected in ${d.month}`,\n                    confidence: 0.85,\n                    severity: \"medium\",\n                    recommendations: [\n                        \"Investigate external factors\",\n                        \"Verify data accuracy\"\n                    ],\n                    data: {\n                        month: d.month,\n                        value: d.visitors,\n                        expected: Math.round(visitorMean)\n                    }\n                });\n            }\n        });\n        return anomalies;\n    }\n    // Generate strategic insights from data patterns\n    generateStrategicInsights(visitorData, feedbackData, destinationData) {\n        const insights = [];\n        // Analyze visitor growth patterns\n        const recentGrowth = this.calculateTrend(visitorData.slice(-6).map((d)=>d.visitors));\n        if (recentGrowth.slope > 100) {\n            insights.push({\n                type: \"trend\",\n                title: \"Accelerating Tourism Growth\",\n                description: `Tourism is experiencing rapid growth with ${Math.round(recentGrowth.slope)} additional visitors per month`,\n                confidence: recentGrowth.correlation,\n                impact: \"high\",\n                actionable: true,\n                recommendedActions: [\n                    \"Scale infrastructure\",\n                    \"Expand marketing budget\",\n                    \"Train additional staff\"\n                ]\n            });\n        }\n        return insights;\n    }\n    generateSentimentInsights(feedbackData) {\n        const insights = [];\n        const recentFeedback = feedbackData.slice(-50);\n        const negativeCount = recentFeedback.filter((f)=>f.aiAnalysis?.sentiment === \"negative\").length;\n        const negativePercentage = negativeCount / recentFeedback.length * 100;\n        if (negativePercentage > 25) {\n            insights.push({\n                type: \"recommendation\",\n                title: \"High Negative Sentiment Alert\",\n                description: `${negativePercentage.toFixed(1)}% of recent feedback is negative, indicating service quality issues`,\n                confidence: 0.9,\n                impact: \"high\",\n                actionable: true,\n                recommendedActions: [\n                    \"Conduct immediate service quality audit\",\n                    \"Implement staff retraining program\",\n                    \"Establish rapid response team for negative feedback\"\n                ]\n            });\n        }\n        return insights;\n    }\n    generateRevenueInsights(revenueData, visitorData) {\n        const insights = [];\n        const revenuePerVisitor = revenueData.map((r, i)=>r.revenue / (visitorData[i]?.visitors || 1));\n        const rpvTrend = this.calculateTrend(revenuePerVisitor);\n        if (rpvTrend.slope < -10) {\n            insights.push({\n                type: \"trend\",\n                title: \"Declining Revenue Per Visitor\",\n                description: `Revenue per visitor is declining by ₹${Math.abs(rpvTrend.slope).toFixed(0)} per month`,\n                confidence: rpvTrend.correlation,\n                impact: \"medium\",\n                actionable: true,\n                recommendedActions: [\n                    \"Review pricing strategy\",\n                    \"Enhance value proposition\",\n                    \"Introduce premium service tiers\"\n                ]\n            });\n        }\n        return insights;\n    }\n    identifyRiskFactors(feedback) {\n        const factors = [];\n        const negativeKeywords = feedback.filter((f)=>f.aiAnalysis?.sentiment === \"negative\").flatMap((f)=>f.aiAnalysis?.keywords || []);\n        const keywordCounts = {};\n        negativeKeywords.forEach((keyword)=>{\n            keywordCounts[keyword] = (keywordCounts[keyword] || 0) + 1;\n        });\n        return Object.entries(keywordCounts).sort(([, a], [, b])=>b - a).slice(0, 5).map(([keyword, count])=>({\n                factor: keyword,\n                frequency: count\n            }));\n    }\n    calculateVariance(values) {\n        const mean = values.reduce((sum, v)=>sum + v, 0) / values.length;\n        return values.reduce((sum, v)=>sum + Math.pow(v - mean, 2), 0) / values.length;\n    }\n    calculateVolatility(values) {\n        const changes = values.slice(1).map((v, i)=>Math.abs(v - values[i]));\n        return changes.reduce((sum, c)=>sum + c, 0) / changes.length;\n    }\n    extractModelResult(result) {\n        if (result.status === \"fulfilled\") {\n            return result.value;\n        }\n        return {\n            model: \"Fallback Model\",\n            accuracy: 0.5,\n            lastTrained: new Date().toISOString(),\n            predictions: []\n        };\n    }\n    getFallbackAnalytics() {\n        return {\n            predictiveModels: {\n                visitorForecast: {\n                    model: \"Basic Linear Regression\",\n                    accuracy: 0.6,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                revenueProjection: {\n                    model: \"Revenue Trend Analysis\",\n                    accuracy: 0.5,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                sentimentTrend: {\n                    model: \"Sentiment Moving Average\",\n                    accuracy: 0.7,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                seasonalPattern: {\n                    model: \"Seasonal Decomposition\",\n                    accuracy: 0.8,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                },\n                riskAssessment: {\n                    model: \"Risk Scoring Model\",\n                    accuracy: 0.6,\n                    lastTrained: new Date().toISOString(),\n                    predictions: []\n                }\n            },\n            mlInsights: [],\n            realTimeMetrics: {\n                currentVisitors: 1200,\n                sentimentScore: 75,\n                alertLevel: \"green\",\n                trendDirection: \"stable\",\n                anomaliesDetected: 0\n            },\n            aiRecommendations: {\n                strategic: [\n                    \"Continue monitoring tourism metrics\"\n                ],\n                operational: [\n                    \"Maintain current service standards\"\n                ],\n                marketing: [\n                    \"Leverage positive feedback in campaigns\"\n                ],\n                infrastructure: [\n                    \"Plan for seasonal capacity adjustments\"\n                ]\n            }\n        };\n    }\n}\n// Singleton instance\nconst advancedAnalytics = new AdvancedAnalyticsEngine();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/advanced-analytics.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1"], () => (__webpack_exec__("(rsc)/./node_modules/.pnpm/next@14.2.32_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalytics%2Froute&page=%2Fapi%2Fanalytics%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalytics%2Froute.ts&appDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5CPrachi%5CDesktop%5CSIH%202025%5CTourism-Jharkhand&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();