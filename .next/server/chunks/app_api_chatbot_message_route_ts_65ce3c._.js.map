{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/api/chatbot/message/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server'\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json()\n    \n    // Forward the request to the backend API\n    const backendResponse = await fetch('http://localhost:5000/api/chatbot/message', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(body),\n    })\n\n    const data = await backendResponse.json()\n    \n    return NextResponse.json(data, { \n      status: backendResponse.status \n    })\n    \n  } catch (error) {\n    console.error('API route error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        error: 'Failed to connect to chatbot service' \n      },\n      { status: 500 }\n    )\n  }\n}\n\nexport async function GET() {\n  try {\n    // Health check endpoint\n    const backendResponse = await fetch('http://localhost:5000/api/chatbot/health', {\n      method: 'GET',\n    })\n\n    const data = await backendResponse.json()\n    \n    return NextResponse.json(data, { \n      status: backendResponse.status \n    })\n    \n  } catch (error) {\n    console.error('Health check error:', error)\n    return NextResponse.json(\n      { \n        success: false, \n        chatbotService: 'unavailable',\n        error: 'Failed to connect to chatbot service' \n      },\n      { status: 503 }\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAE/B,yCAAyC;QACzC,MAAM,kBAAkB,MAAM,MAAM,6CAA6C;YAC/E,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;QACvB;QAEA,MAAM,OAAO,MAAM,gBAAgB,IAAI;QAEvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAC7B,QAAQ,gBAAgB,MAAM;QAChC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oBAAoB;QAClC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,IAAI;QACF,wBAAwB;QACxB,MAAM,kBAAkB,MAAM,MAAM,4CAA4C;YAC9E,QAAQ;QACV;QAEA,MAAM,OAAO,MAAM,gBAAgB,IAAI;QAEvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAC7B,QAAQ,gBAAgB,MAAM;QAChC;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,gBAAgB;YAChB,OAAO;QACT,GACA;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}